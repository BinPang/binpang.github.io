{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1683367115930},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1683367114988},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1683367115004},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1683367115004},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1683367115004},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1683367115002},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1683367115003},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1683367115002},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1683367115003},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1683367115002},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1683367115003},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1683367115002},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1683367115003},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1683367115001},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1683367115004},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1683367115004},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1683367115002},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1683367115003},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1683367115004},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1683367115003},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1683367115004},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1683367114989},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1683367114989},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1683367114989},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1683367114989},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1683367114989},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1683367114993},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1683367114989},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1683367115005},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1683367114992},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1683367114991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1683367114991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1683367114993},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1683367114992},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1683367114992},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1683367114992},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1683367114993},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1683367114992},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1683367114991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1683367114992},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1683367114994},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1683367114994},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1683367114994},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1683367114993},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1683367114994},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1683367115000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1683367114996},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1683367114999},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1683367114995},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1683367115001},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1683367114990},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1683367114991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1683367114991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1683367114991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1683367114990},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1683367114990},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1683367114998},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1683367114997},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1683367114998},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1683367114998},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1683367114997},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1683367114998},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1683367114997},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1683367114999},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1683367114997},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1683367114998},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1683367114996},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1683367114996},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1683367114995},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1683367115001},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1683367115000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1683367115000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1683367115000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1683367115000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1683367115000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1683367114996},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1683367114999},{"_id":"public/2023/05/06/hello-world/index.html","hash":"3d6091fa3797dde5c0eabaeb4a1e9d4e618d8f4d","modified":1683367160587},{"_id":"public/index.html","hash":"1a5d33e0d0f355060e05a8c5a06124ea1437aca8","modified":1683368124008},{"_id":"public/archives/index.html","hash":"67ff6c74bf01a3fe639909fd298be8bc3b1f8335","modified":1683368124008},{"_id":"public/archives/2023/index.html","hash":"50befe04fe87154137b28ebc8e2bbf7aecc65b17","modified":1683368124008},{"_id":"public/archives/2023/05/index.html","hash":"83ee93f1e9eccf6e297ca35b9d4528983c7d6395","modified":1683368124008},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1683368124008},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1683368124008},{"_id":"public/css/style.css","hash":"4da345d832a2682bcaee3ab3e22c15e3cd0e9cde","modified":1683368124008},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1683368124008},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1683368124008},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1683368124008},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1683368124008},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1683368124008},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1683368124008},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1683368124008},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1683368124008},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1683368124008},{"_id":"source/_posts/2022-10-13-golang-err.md","hash":"e2df8882949d2eb82a81b63c04138ce4330ff23a","modified":1665657546289},{"_id":"source/_posts/2022-10-13-welcome-to-jekyll.markdown","hash":"c9545bb9e45813b1b869f116764f8cc96aabe3d2","modified":1665654454947},{"_id":"source/_posts/2022-11-21-grpc-wrapper.md","hash":"fbc7dcbc1f727b0ca99343c4c604523b3b80614e","modified":1675673390045},{"_id":"source/_posts/2022-12-19-lcs.md","hash":"6fb080501f345b866bd79daf10006925a5079e43","modified":1675681175223},{"_id":"source/_posts/2022-12-28-raft.md","hash":"96fdbaaca0b73945eb9765122874c433a86607ec","modified":1676615535326},{"_id":"source/_posts/2023-02-10-grpc-biz-err.md","hash":"b9341dd90f3ae8f93864c86aa328f15afa3af18b","modified":1676612333955},{"_id":"source/_posts/2023-02-17-mysql-content.md","hash":"464ba644946a7259ec89c7e603fb6eb8d2649fa8","modified":1676612232160},{"_id":"source/_posts/2023-05-06-redis-zcount.md","hash":"f8dc8500b9e0dddc20d34e648fe5d57ec665134c","modified":1683367561933},{"_id":"source/_posts/mysql/2023-02-17-mysql-0-0.md","hash":"e5abf274b746b7c32d0dfd72cf93e3ccf1c4736d","modified":1683365031775},{"_id":"source/_posts/mysql/2023-02-17-mysql-1-1.md","hash":"7a96a5a1404e26de36d6c3aef0954b618155c9ba","modified":1683365031762},{"_id":"source/_posts/mysql/2023-02-17-mysql-1-2.md","hash":"fbac78ad6ec403a941b804df489f56f4f889d762","modified":1683365031771},{"_id":"source/_posts/mysql/2023-02-17-mysql-3-1.md","hash":"9eae3e328727e752e3372143a82cbe8d28cb32f1","modified":1677814168892},{"_id":"source/_posts/mysql/2023-02-17-mysql-2-4.md","hash":"dc20d6f003ed450eb607fcbd75085dbc5ea169ab","modified":1683364861121},{"_id":"source/_posts/mysql/2023-02-17-mysql-2-1.md","hash":"1944883f1d3351b13b9bc400e1e865bf282a104b","modified":1677813707129},{"_id":"source/_posts/mysql/2023-02-17-mysql-2-2.md","hash":"8ef53b9d784f01b7d9d34be0e2c3870afd054ead","modified":1677813812806},{"_id":"source/_posts/mysql/2023-02-17-mysql-2-3.md","hash":"393a9b91b57f92328ff678afbad2ee88e795d6dc","modified":1677813819796},{"_id":"source/_posts/mysql/2023-02-17-mysql-4-1.md","hash":"e3fbf8c92086aab08ad410e354bdb397e83f2498","modified":1677814223130},{"_id":"source/_posts/mysql/2023-02-17-mysql-4-2.md","hash":"5dbce760e3f5189014d09a8db0b5399d674670f5","modified":1677814230862},{"_id":"source/_posts/mysql/2023-02-17-mysql-5-2.md","hash":"fe230c488e625c15f4ed163b7b2efd75d7add4e4","modified":1677814368062},{"_id":"source/_posts/mysql/2023-02-17-mysql-5-1.md","hash":"1fe1546d8e66cd83ee08a0459b06c87f56ba6a72","modified":1677814365161},{"_id":"source/_posts/mysql/2023-02-17-mysql-5-3.md","hash":"7aed0d63b445f2eaaf73702578fe5e0558303574","modified":1677814386000},{"_id":"source/_posts/mysql/2023-02-17-mysql-5-4.md","hash":"1649345e5efc7a8961cdbbae82bb9620d32f5bda","modified":1677814405539},{"_id":"source/_posts/mysql/2023-02-17-mysql-6-1.md","hash":"2fa7c649fdbed18ba12c6293d6f6b65a202821ff","modified":1677814422918},{"_id":"source/_posts/mysql/2023-02-17-mysql-6-3.md","hash":"ef5938013506e1cdd08e928a75642c933e38a494","modified":1677814446628},{"_id":"source/_posts/mysql/2023-02-17-mysql-7-2.md","hash":"5869a296044aadf61f09ed2a6ac80c9bdc1ba9c2","modified":1677814523064},{"_id":"source/_posts/mysql/2023-02-17-mysql-7-1.md","hash":"61661bcd7c090845c02834e22a1f59964079f658","modified":1677814471379},{"_id":"source/_posts/mysql/2023-02-17-mysql-6-2.md","hash":"ce29980853ce9df33e4c1ae877325698bcbc39bf","modified":1677814433754},{"_id":"public/2023/05/06/2023-05-06-redis-zcount/index.html","hash":"3329d0449709d6e0948bd75598df2c38ed377107","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-1-1/index.html","hash":"1d45ffcfacef2a95e37f8e8bbd357e6b6bbada23","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-2-2/index.html","hash":"18b7014336c7c99de1ccb091fe136f3f345401d1","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-1-2/index.html","hash":"bed10bb606a5102a3e6c4ac08aa80dbf3aa76377","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-2-3/index.html","hash":"1f3fdb1815652b730eed97e3093f74e3b129c937","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-4-1/index.html","hash":"482e39d7f607f9324327635f05e680b146dab2af","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-0-0/index.html","hash":"a441d879a6c5d0ff4f0c94d46a7639125ab94d79","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-4-2/index.html","hash":"b1539b7160878c878c0acaa2e36a3b9853914113","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-3-1/index.html","hash":"a34ce8aaeecf5665ca13229815e4f35ff2453b6d","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-2-1/index.html","hash":"179f465ff7b6725ec5593b611be3b4577d9dbe56","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-2-4/index.html","hash":"a9102cdfb208c11b6c64317fdad25a3d86bba141","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-5-2/index.html","hash":"ae2727c3f24e945e51a94096b5edf0656fe77ce8","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-5-4/index.html","hash":"e23c67a0e77559a0e9edd9dfd8526717c4b71771","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-5-3/index.html","hash":"d8043a36a74d99897ff36f5a51f7ffb9c8f1f99c","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-5-1/index.html","hash":"1e862a9172d0c2f4a7abfd73396cd045cf261bd4","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-6-1/index.html","hash":"5559d4568e3eaf3b0a0f1e86877805c7157f1344","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-6-2/index.html","hash":"651a836b763ad1ffcb5bb4d9bbbf7befec437c96","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-7-1/index.html","hash":"a68a0a37ae2c7f229d80b8e25df2b374f4f4655e","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-6-3/index.html","hash":"579d59c132081f3d4c5b9eb2cfce218442f0730d","modified":1683368124008},{"_id":"public/2023/03/03/mysql/2023-02-17-mysql-7-2/index.html","hash":"0d7597627b4e05e3bc59f8c17d780f34e49e3c29","modified":1683368124008},{"_id":"public/2023/02/17/2023-02-17-mysql-content/index.html","hash":"77a619427aa0832a0ffbc93247795c9394ef78c7","modified":1683368124008},{"_id":"public/2022/12/19/2022-12-28-raft/index.html","hash":"4aa17fce462b5f29def821d32ecc2e9788190ec5","modified":1683368124008},{"_id":"public/2022/12/19/2022-12-19-lcs/index.html","hash":"2bc0bd6f4e836e5d17e49755a18a620abb6f1035","modified":1683368124008},{"_id":"public/2022/11/21/2022-11-21-grpc-wrapper/index.html","hash":"b5bf700fa2ea6d49c0de79bbecdfa05fa908f21a","modified":1683368124008},{"_id":"public/2022/11/21/2023-02-10-grpc-biz-err/index.html","hash":"f7ee0ce984bb677dbc734e01bace3d4073bf3871","modified":1683368124008},{"_id":"public/2022/10/13/2022-10-13-golang-err/index.html","hash":"3808689a6a0f475cdcbfed9d5d30aaa78282d92e","modified":1683368124008},{"_id":"public/archives/page/2/index.html","hash":"2d428661a8e8f395be745257a11bd021f95805e0","modified":1683368124008},{"_id":"public/archives/page/3/index.html","hash":"2777b163cb9f985d059bfb4d58b36906a7ac00ed","modified":1683368124008},{"_id":"public/archives/2022/index.html","hash":"c016125acfa76ae38645ebf4a97e4dc56c544bf3","modified":1683368124008},{"_id":"public/archives/2022/10/index.html","hash":"d1e035912ce38b8a5b8a01339bad9f2dcc6415ac","modified":1683368124008},{"_id":"public/archives/2022/11/index.html","hash":"099af1796bee514f34b0c513685f6557f105e568","modified":1683368124008},{"_id":"public/archives/2022/12/index.html","hash":"6934ecf9d220c6aa70466d999f6b5afbddead0d9","modified":1683368124008},{"_id":"public/archives/2023/page/2/index.html","hash":"44a6d72042ea6774e1132c46fb7c872744bec798","modified":1683368124008},{"_id":"public/archives/2023/page/3/index.html","hash":"d2f829caeec184690854ae6f01235e6a4852b74b","modified":1683368124008},{"_id":"public/archives/2023/02/index.html","hash":"26b90cf7fa3cbadbaecbe338590b3df892a0308b","modified":1683368124008},{"_id":"public/archives/2023/03/index.html","hash":"94f3b179d6eb9b897dae4290cfa004e94743f4bf","modified":1683368124008},{"_id":"public/archives/2023/03/page/2/index.html","hash":"036512f054ffb7a81d3e9825a7dbad13c528a3cc","modified":1683368124008},{"_id":"public/categories/golang/index.html","hash":"73a8b7386bfd2924d8bb065fde23c7f72cce3196","modified":1683368124008},{"_id":"public/categories/algorithm/index.html","hash":"e63c909e7d56fa86d9de23510b10e07ac2a7bc77","modified":1683368124008},{"_id":"public/categories/mysql/index.html","hash":"b9bd960f0bb64048ca6b054486506dde187e744b","modified":1683368124008},{"_id":"public/categories/mysql/page/2/index.html","hash":"45dc2e53c8d1224e4236da42cfefae5d70649371","modified":1683368124008},{"_id":"public/categories/redis/index.html","hash":"b4b10e5830f34ae6eeb74823745f1f7de2db408d","modified":1683368124008},{"_id":"public/page/2/index.html","hash":"b1e4ebb7988a744141e5d51644adac925543043e","modified":1683368124008},{"_id":"public/page/3/index.html","hash":"0e6056bf6d170870e12cfb389f23d33717366a83","modified":1683368124008}],"Category":[{"name":"golang","_id":"clhbtg9bl0002gg4bfhxpge9m"},{"name":"jekyll update","_id":"clhbtg9bm0006gg4bfz8574b4"},{"name":"algorithm","_id":"clhbtg9bo000egg4b0k9u3wzt"},{"name":"mysql","_id":"clhbtg9bq000mgg4bf9qv2tbn"},{"name":"redis","_id":"clhbtg9bq000rgg4b2qu775zi"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"golang 业务 error封装","date":"2022-10-12T16:00:00.000Z","_content":"\n这是我的第一篇文章\n\n## 问题产生\n\n###\n在业务中，api或者rpc返回的数据通常如下格式\n\n```\ntype Response struct {\n\tCode int         `json:\"code,omitempty\"`\n\tMsg  string      `json:\"msg,omitempty\"`\n\tData interface{} `json:\"data,omitempty\"`\n}\n```\n\n而在开发中，一般返回的结果为`(*model.Info, error)`，而不是返回`(*model.Info, code, msg)`\n\n因此一般会包装一个err，例如\n```go\ntype Error struct { \n\tcode int\n\tmsg  string\n}\n\nfunc (p *mError) Error() string {\n\t_, msg := GetErrorCodeMsg(p)\n\treturn msg\n}\n```\n\n由于我们\n\n但是这会出现的一个问题是\n\n```go\nfunc UserService() {\n    _, err := json.Marshal()\n    if err != nil {\n    } // todo\n    _, err := dao.GetXX()\n    if err != nil {\n    }\n}\n\n```\n\n这里就会出问题了，第二个`err`会永远成立`err != nil`， 这里为什么永远成立，可以参考一些文章，这里就不叙述了\n\n## 问题解决\n\n### kk\n\n我们规范使用标准的`err`命名为`stdErr`, 业务的`err`命名为`bizErr`，但是出现的问题是历史大量代码，还是容易出错\n\n而\n\n### 第二版\n\n由于第一版还是没有从根本上解决`err`问题，还导致了err越用越乱，到处都是混用\n\n因此我们考虑从根本解决这个问题\n\n导致问题的根本原因是：返回了自定义的err，我们就考虑能不能不返回自定义err呢\n\n\n```go\npackage main\n\ntype mError struct { // 注意，这里故意是用小写的，防止流到包外去了\n    code int\n    msg  string\n}\n\nfunc (p *mError) Error() string {\n    _, msg := GetErrorCodeMsg(p)\n    return msg\n}\n\nfunc GetErrorCodeMsg(err error) (int, string) {\n    var me *mError\n    if errors.As(err, &me) {\n        return me.code, me.msg\n    }\n    return defaultCode, err.Error()\n}\n```\n\n","source":"_posts/2022-10-13-golang-err.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"golang 业务 error封装\"\n\ndate:   2022-10-13\n\ncategories: golang\n\n---\n\n这是我的第一篇文章\n\n## 问题产生\n\n###\n在业务中，api或者rpc返回的数据通常如下格式\n\n```\ntype Response struct {\n\tCode int         `json:\"code,omitempty\"`\n\tMsg  string      `json:\"msg,omitempty\"`\n\tData interface{} `json:\"data,omitempty\"`\n}\n```\n\n而在开发中，一般返回的结果为`(*model.Info, error)`，而不是返回`(*model.Info, code, msg)`\n\n因此一般会包装一个err，例如\n```go\ntype Error struct { \n\tcode int\n\tmsg  string\n}\n\nfunc (p *mError) Error() string {\n\t_, msg := GetErrorCodeMsg(p)\n\treturn msg\n}\n```\n\n由于我们\n\n但是这会出现的一个问题是\n\n```go\nfunc UserService() {\n    _, err := json.Marshal()\n    if err != nil {\n    } // todo\n    _, err := dao.GetXX()\n    if err != nil {\n    }\n}\n\n```\n\n这里就会出问题了，第二个`err`会永远成立`err != nil`， 这里为什么永远成立，可以参考一些文章，这里就不叙述了\n\n## 问题解决\n\n### kk\n\n我们规范使用标准的`err`命名为`stdErr`, 业务的`err`命名为`bizErr`，但是出现的问题是历史大量代码，还是容易出错\n\n而\n\n### 第二版\n\n由于第一版还是没有从根本上解决`err`问题，还导致了err越用越乱，到处都是混用\n\n因此我们考虑从根本解决这个问题\n\n导致问题的根本原因是：返回了自定义的err，我们就考虑能不能不返回自定义err呢\n\n\n```go\npackage main\n\ntype mError struct { // 注意，这里故意是用小写的，防止流到包外去了\n    code int\n    msg  string\n}\n\nfunc (p *mError) Error() string {\n    _, msg := GetErrorCodeMsg(p)\n    return msg\n}\n\nfunc GetErrorCodeMsg(err error) (int, string) {\n    var me *mError\n    if errors.As(err, &me) {\n        return me.code, me.msg\n    }\n    return defaultCode, err.Error()\n}\n```\n\n","slug":"2022-10-13-golang-err","published":1,"updated":"2022-10-13T10:39:06.289Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bi0000gg4bfwg2h2uo","content":"<p>这是我的第一篇文章</p>\n<h2 id=\"问题产生\"><a href=\"#问题产生\" class=\"headerlink\" title=\"问题产生\"></a>问题产生</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>在业务中，api或者rpc返回的数据通常如下格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Response struct &#123;</span><br><span class=\"line\">\tCode int         `json:&quot;code,omitempty&quot;`</span><br><span class=\"line\">\tMsg  string      `json:&quot;msg,omitempty&quot;`</span><br><span class=\"line\">\tData interface&#123;&#125; `json:&quot;data,omitempty&quot;`</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在开发中，一般返回的结果为<code>(*model.Info, error)</code>，而不是返回<code>(*model.Info, code, msg)</code></p>\n<p>因此一般会包装一个err，例如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Error <span class=\"keyword\">struct</span> &#123; </span><br><span class=\"line\">\tcode <span class=\"type\">int</span></span><br><span class=\"line\">\tmsg  <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *mError)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t_, msg := GetErrorCodeMsg(p)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> msg</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们</p>\n<p>但是这会出现的一个问题是</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UserService</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    _, err := json.Marshal()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// todo</span></span><br><span class=\"line\">    _, err := dao.GetXX()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里就会出问题了，第二个<code>err</code>会永远成立<code>err != nil</code>， 这里为什么永远成立，可以参考一些文章，这里就不叙述了</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"kk\"><a href=\"#kk\" class=\"headerlink\" title=\"kk\"></a>kk</h3><p>我们规范使用标准的<code>err</code>命名为<code>stdErr</code>, 业务的<code>err</code>命名为<code>bizErr</code>，但是出现的问题是历史大量代码，还是容易出错</p>\n<p>而</p>\n<h3 id=\"第二版\"><a href=\"#第二版\" class=\"headerlink\" title=\"第二版\"></a>第二版</h3><p>由于第一版还是没有从根本上解决<code>err</code>问题，还导致了err越用越乱，到处都是混用</p>\n<p>因此我们考虑从根本解决这个问题</p>\n<p>导致问题的根本原因是：返回了自定义的err，我们就考虑能不能不返回自定义err呢</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> mError <span class=\"keyword\">struct</span> &#123; <span class=\"comment\">// 注意，这里故意是用小写的，防止流到包外去了</span></span><br><span class=\"line\">    code <span class=\"type\">int</span></span><br><span class=\"line\">    msg  <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *mError)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    _, msg := GetErrorCodeMsg(p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetErrorCodeMsg</span><span class=\"params\">(err <span class=\"type\">error</span>)</span></span> (<span class=\"type\">int</span>, <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me *mError</span><br><span class=\"line\">    <span class=\"keyword\">if</span> errors.As(err, &amp;me) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> me.code, me.msg</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> defaultCode, err.Error()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>这是我的第一篇文章</p>\n<h2 id=\"问题产生\"><a href=\"#问题产生\" class=\"headerlink\" title=\"问题产生\"></a>问题产生</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>在业务中，api或者rpc返回的数据通常如下格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Response struct &#123;</span><br><span class=\"line\">\tCode int         `json:&quot;code,omitempty&quot;`</span><br><span class=\"line\">\tMsg  string      `json:&quot;msg,omitempty&quot;`</span><br><span class=\"line\">\tData interface&#123;&#125; `json:&quot;data,omitempty&quot;`</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在开发中，一般返回的结果为<code>(*model.Info, error)</code>，而不是返回<code>(*model.Info, code, msg)</code></p>\n<p>因此一般会包装一个err，例如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Error <span class=\"keyword\">struct</span> &#123; </span><br><span class=\"line\">\tcode <span class=\"type\">int</span></span><br><span class=\"line\">\tmsg  <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *mError)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t_, msg := GetErrorCodeMsg(p)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> msg</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们</p>\n<p>但是这会出现的一个问题是</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UserService</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    _, err := json.Marshal()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// todo</span></span><br><span class=\"line\">    _, err := dao.GetXX()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里就会出问题了，第二个<code>err</code>会永远成立<code>err != nil</code>， 这里为什么永远成立，可以参考一些文章，这里就不叙述了</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"kk\"><a href=\"#kk\" class=\"headerlink\" title=\"kk\"></a>kk</h3><p>我们规范使用标准的<code>err</code>命名为<code>stdErr</code>, 业务的<code>err</code>命名为<code>bizErr</code>，但是出现的问题是历史大量代码，还是容易出错</p>\n<p>而</p>\n<h3 id=\"第二版\"><a href=\"#第二版\" class=\"headerlink\" title=\"第二版\"></a>第二版</h3><p>由于第一版还是没有从根本上解决<code>err</code>问题，还导致了err越用越乱，到处都是混用</p>\n<p>因此我们考虑从根本解决这个问题</p>\n<p>导致问题的根本原因是：返回了自定义的err，我们就考虑能不能不返回自定义err呢</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> mError <span class=\"keyword\">struct</span> &#123; <span class=\"comment\">// 注意，这里故意是用小写的，防止流到包外去了</span></span><br><span class=\"line\">    code <span class=\"type\">int</span></span><br><span class=\"line\">    msg  <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *mError)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    _, msg := GetErrorCodeMsg(p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetErrorCodeMsg</span><span class=\"params\">(err <span class=\"type\">error</span>)</span></span> (<span class=\"type\">int</span>, <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me *mError</span><br><span class=\"line\">    <span class=\"keyword\">if</span> errors.As(err, &amp;me) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> me.code, me.msg</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> defaultCode, err.Error()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"golang grpc response wrapper","date":"2022-11-20T16:00:00.000Z","_content":"\n## 原始代码\n\n```go\nxxxResp, err := pkg.GetXXXGrpc().YYYMethod(ctx, &proto.YYYReq{...})\nif err != nil {\n    // todo log\n    return err\n}\nif xxxResp.GetHeader().GetCode() != 0 {\n\t// todo log\n    return nil\n}\n// biz\n```\n\n### PB 定义\n\n```protobuf\nmessage CheckReportPunishReq {\n  // todo 请求参数\n}\n\nmessage CheckReportPunishResp {\n  RpcHeader header = 1;\n  // todo 返回结果\n}\n\nmessage RpcHeader {\n  int32 code = 1;\n  string message = 2;\n}\n```\n\n## 封装代码\n\n```\nfunc GrpcWrapperNoErr[Req, Resp any, RResp interface {\n\t*Resp\n\tGetHeader() *proto.RpcHeader\n}](ctx context.Context, f func(context.Context, *Req, ...grpc.CallOption) (*Resp, error), req *Req, opts ...grpc.CallOption) *Resp {\n\tdata, err := f(ctx, req, opts...)\n\tif err != nil {\n\t\t// log\n\t\tret := new(Resp)\n\t\twrapErr := reflect.ValueOf(&proto.RpcHeader{Code: 500, Message: \"system_busy\"})\n\t\treflect.ValueOf(ret).Elem().FieldByName(\"Header\").Set(wrapErr)\n\t\treturn ret\n\t}\n\tpData := RResp(data)\n\tif pData.GetHeader().GetCode() != 0 {\n\t\t// log\n\t\treturn data\n\t}\n\t// debug log\n\treturn data\n}\n```\n### 业务调用\n\n```\nuid = utils.GrpcWrapperNoErr(ctx, pkg.GetXXXGrpc().YYY, &proto.YYYReq{\n    // xxx\n    // yyy\n}).GetYYY().GetZZZ()\n```\n\n那么就可以直接获取uid了","source":"_posts/2022-11-21-grpc-wrapper.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"golang grpc response wrapper\"\n\ndate:   2022-11-21\n\ncategories: golang\n\n---\n\n## 原始代码\n\n```go\nxxxResp, err := pkg.GetXXXGrpc().YYYMethod(ctx, &proto.YYYReq{...})\nif err != nil {\n    // todo log\n    return err\n}\nif xxxResp.GetHeader().GetCode() != 0 {\n\t// todo log\n    return nil\n}\n// biz\n```\n\n### PB 定义\n\n```protobuf\nmessage CheckReportPunishReq {\n  // todo 请求参数\n}\n\nmessage CheckReportPunishResp {\n  RpcHeader header = 1;\n  // todo 返回结果\n}\n\nmessage RpcHeader {\n  int32 code = 1;\n  string message = 2;\n}\n```\n\n## 封装代码\n\n```\nfunc GrpcWrapperNoErr[Req, Resp any, RResp interface {\n\t*Resp\n\tGetHeader() *proto.RpcHeader\n}](ctx context.Context, f func(context.Context, *Req, ...grpc.CallOption) (*Resp, error), req *Req, opts ...grpc.CallOption) *Resp {\n\tdata, err := f(ctx, req, opts...)\n\tif err != nil {\n\t\t// log\n\t\tret := new(Resp)\n\t\twrapErr := reflect.ValueOf(&proto.RpcHeader{Code: 500, Message: \"system_busy\"})\n\t\treflect.ValueOf(ret).Elem().FieldByName(\"Header\").Set(wrapErr)\n\t\treturn ret\n\t}\n\tpData := RResp(data)\n\tif pData.GetHeader().GetCode() != 0 {\n\t\t// log\n\t\treturn data\n\t}\n\t// debug log\n\treturn data\n}\n```\n### 业务调用\n\n```\nuid = utils.GrpcWrapperNoErr(ctx, pkg.GetXXXGrpc().YYY, &proto.YYYReq{\n    // xxx\n    // yyy\n}).GetYYY().GetZZZ()\n```\n\n那么就可以直接获取uid了","slug":"2022-11-21-grpc-wrapper","published":1,"updated":"2023-02-06T08:49:50.045Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bl0003gg4ba5vta4bc","content":"<h2 id=\"原始代码\"><a href=\"#原始代码\" class=\"headerlink\" title=\"原始代码\"></a>原始代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxResp, err := pkg.GetXXXGrpc().YYYMethod(ctx, &amp;proto.YYYReq&#123;...&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo log</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> xxxResp.GetHeader().GetCode() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// todo log</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// biz</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PB-定义\"><a href=\"#PB-定义\" class=\"headerlink\" title=\"PB 定义\"></a>PB 定义</h3><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">CheckReportPunishReq</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo 请求参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">CheckReportPunishResp</span> &#123;</span><br><span class=\"line\">  RpcHeader header = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// todo 返回结果</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">RpcHeader</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int32</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装代码\"><a href=\"#封装代码\" class=\"headerlink\" title=\"封装代码\"></a>封装代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GrpcWrapperNoErr[Req, Resp any, RResp interface &#123;</span><br><span class=\"line\">\t*Resp</span><br><span class=\"line\">\tGetHeader() *proto.RpcHeader</span><br><span class=\"line\">&#125;](ctx context.Context, f func(context.Context, *Req, ...grpc.CallOption) (*Resp, error), req *Req, opts ...grpc.CallOption) *Resp &#123;</span><br><span class=\"line\">\tdata, err := f(ctx, req, opts...)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t// log</span><br><span class=\"line\">\t\tret := new(Resp)</span><br><span class=\"line\">\t\twrapErr := reflect.ValueOf(&amp;proto.RpcHeader&#123;Code: 500, Message: &quot;system_busy&quot;&#125;)</span><br><span class=\"line\">\t\treflect.ValueOf(ret).Elem().FieldByName(&quot;Header&quot;).Set(wrapErr)</span><br><span class=\"line\">\t\treturn ret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpData := RResp(data)</span><br><span class=\"line\">\tif pData.GetHeader().GetCode() != 0 &#123;</span><br><span class=\"line\">\t\t// log</span><br><span class=\"line\">\t\treturn data</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// debug log</span><br><span class=\"line\">\treturn data</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"业务调用\"><a href=\"#业务调用\" class=\"headerlink\" title=\"业务调用\"></a>业务调用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uid = utils.GrpcWrapperNoErr(ctx, pkg.GetXXXGrpc().YYY, &amp;proto.YYYReq&#123;</span><br><span class=\"line\">    // xxx</span><br><span class=\"line\">    // yyy</span><br><span class=\"line\">&#125;).GetYYY().GetZZZ()</span><br></pre></td></tr></table></figure>\n\n<p>那么就可以直接获取uid了</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原始代码\"><a href=\"#原始代码\" class=\"headerlink\" title=\"原始代码\"></a>原始代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxResp, err := pkg.GetXXXGrpc().YYYMethod(ctx, &amp;proto.YYYReq&#123;...&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo log</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> xxxResp.GetHeader().GetCode() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// todo log</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// biz</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PB-定义\"><a href=\"#PB-定义\" class=\"headerlink\" title=\"PB 定义\"></a>PB 定义</h3><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">CheckReportPunishReq</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo 请求参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">CheckReportPunishResp</span> &#123;</span><br><span class=\"line\">  RpcHeader header = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// todo 返回结果</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">RpcHeader</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int32</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装代码\"><a href=\"#封装代码\" class=\"headerlink\" title=\"封装代码\"></a>封装代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GrpcWrapperNoErr[Req, Resp any, RResp interface &#123;</span><br><span class=\"line\">\t*Resp</span><br><span class=\"line\">\tGetHeader() *proto.RpcHeader</span><br><span class=\"line\">&#125;](ctx context.Context, f func(context.Context, *Req, ...grpc.CallOption) (*Resp, error), req *Req, opts ...grpc.CallOption) *Resp &#123;</span><br><span class=\"line\">\tdata, err := f(ctx, req, opts...)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t// log</span><br><span class=\"line\">\t\tret := new(Resp)</span><br><span class=\"line\">\t\twrapErr := reflect.ValueOf(&amp;proto.RpcHeader&#123;Code: 500, Message: &quot;system_busy&quot;&#125;)</span><br><span class=\"line\">\t\treflect.ValueOf(ret).Elem().FieldByName(&quot;Header&quot;).Set(wrapErr)</span><br><span class=\"line\">\t\treturn ret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpData := RResp(data)</span><br><span class=\"line\">\tif pData.GetHeader().GetCode() != 0 &#123;</span><br><span class=\"line\">\t\t// log</span><br><span class=\"line\">\t\treturn data</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// debug log</span><br><span class=\"line\">\treturn data</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"业务调用\"><a href=\"#业务调用\" class=\"headerlink\" title=\"业务调用\"></a>业务调用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uid = utils.GrpcWrapperNoErr(ctx, pkg.GetXXXGrpc().YYY, &amp;proto.YYYReq&#123;</span><br><span class=\"line\">    // xxx</span><br><span class=\"line\">    // yyy</span><br><span class=\"line\">&#125;).GetYYY().GetZZZ()</span><br></pre></td></tr></table></figure>\n\n<p>那么就可以直接获取uid了</p>\n"},{"layout":"post","title":"raft","date":"2022-12-18T16:00:00.000Z","_content":"\n## 什么是一致性\n分布式系统中，一份数据一般会存在多个副本，要求多副本数据对于数据的更新与单份数据相同\n\n几点需要注意的\n* 如果是单机系统，通过锁与事务等机制就能保证一致性\n* 如果是分布式系统，数据如果只有一份并且这份数据固定在某台机器上，那么可以当成单机系统\n* 如果是分布式系统，数据如果只有一份并且这份数据可以在多个副本间迁移，那么在迁移过程中可以等待迁移完成，或者给访问者提示系统繁忙，稍后重试\n* 如果在某一时刻A=3，然后被修改成了4，再次获取到的就是A=4，这里就不是一致性讨论的问题了\n\n在客户端与分布式系统（包括单机系统）通过网络交互时，由于网络不可靠，存在3种可能\n* 客户端感知失败，分布式系统也失败，例如：客户端与系统网络不通\n* 客户端感知失败，分布式系统成功，例如：在分布式系统执行成功后，向客户端发送失败\n* 客户端感知成功，在这种情况下，我们默认会认为分布式系统是成功的，除非分布式系统出现bug\n\n注意当需要幂等时，这时需要客户端与服务端使用唯一标识符进行幂等操作\n\n## 为什么\n我们用客户端(C)请求服务端(S)的请求(Q)的各种情况说明为什么要这么做\nC：客户端请求\nS：服务器\nQ：请求\n\n我们的Q可以是任意值，例如：uid1给uid2转账2元，\n### 一台服务器\nC请求S失败了，那么C需要重试，当然如果有幂等情况，需要C自己保证(例如：Q=用户A给用户B转账5元，通常Q=用户A给用户B转账5元且唯一Id=唯一ID)\n\n如果S挂了，那么服务就彻底不可用了，考虑到极端的情况：如果S所在的机房发生火灾、地震、磁盘损坏等情况，那么数据也就丢失了\n\n### 两台服务器\n当然一台服务发现S挂了，服务就会停止运行\n\n当然2台服务器我们首先想到的就是主从结构，S1做主，S2做从。执行在S1上执行，S1讲执行的Q通过binlog的方式同步到S2\n因此正常情况下Q在S1、S2上都会按照同样的顺序执行\n\n异常情况\n如果C写S1成功后，S1还未同步给S2，S1挂了，那么S1执行了，而S2未执行导致不一致\n\n显然造成的原因是S1的binlog未能顺利同步到S2，那么比较简单了\n\nC写S1后，S1先不给C返回，而是将binlog同步到S2，待S2确定后反馈给S1，这时S1才反馈给C\n\n但是这里有个特别大的问题就是，如果S2挂了，那么服务是不可用的\n\n### 3台服务器(多台)\n通过前面讨论，1台&2台服务器都是满足不了的，那么\n如果3台服务器，挂了一台能满足整个系统的可用性也是能满足条件的\n\n\n\n我们在一台服务中能看到典型的就是服务器挂掉后，服务就不可用了，自然我们能想到的就是用2台机器，如果一台挂了，那么\n1. 1台服务器(S)，C请求S失败了，那么C需要重试，当然如果有幂等情况，需要C自己保证(例如：Q=用户A给用户B转账5元，通常Q=用户A给用户B转账5元且唯一Id=123)\n2. 1台服务器(S)，如果S挂了，那么服务不可用\n3. 2台服务器主从(S1主, S2从)，C写S1(Q1)成功后返回给C成功了，S1还未同步到S2时，S1挂了，那么Q1将丢失\n4. 2台服务器主从(S1主, S2从)，C写S1(Q1)后，S1同步binlog到S2，S1挂了，那么Q1将丢失\n有如下业务场景\n```\nclient ----> server\n```","source":"_posts/2022-12-28-raft.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"raft\"\n\ndate:   2022-12-19\n\ncategories: algorithm\n\n---\n\n## 什么是一致性\n分布式系统中，一份数据一般会存在多个副本，要求多副本数据对于数据的更新与单份数据相同\n\n几点需要注意的\n* 如果是单机系统，通过锁与事务等机制就能保证一致性\n* 如果是分布式系统，数据如果只有一份并且这份数据固定在某台机器上，那么可以当成单机系统\n* 如果是分布式系统，数据如果只有一份并且这份数据可以在多个副本间迁移，那么在迁移过程中可以等待迁移完成，或者给访问者提示系统繁忙，稍后重试\n* 如果在某一时刻A=3，然后被修改成了4，再次获取到的就是A=4，这里就不是一致性讨论的问题了\n\n在客户端与分布式系统（包括单机系统）通过网络交互时，由于网络不可靠，存在3种可能\n* 客户端感知失败，分布式系统也失败，例如：客户端与系统网络不通\n* 客户端感知失败，分布式系统成功，例如：在分布式系统执行成功后，向客户端发送失败\n* 客户端感知成功，在这种情况下，我们默认会认为分布式系统是成功的，除非分布式系统出现bug\n\n注意当需要幂等时，这时需要客户端与服务端使用唯一标识符进行幂等操作\n\n## 为什么\n我们用客户端(C)请求服务端(S)的请求(Q)的各种情况说明为什么要这么做\nC：客户端请求\nS：服务器\nQ：请求\n\n我们的Q可以是任意值，例如：uid1给uid2转账2元，\n### 一台服务器\nC请求S失败了，那么C需要重试，当然如果有幂等情况，需要C自己保证(例如：Q=用户A给用户B转账5元，通常Q=用户A给用户B转账5元且唯一Id=唯一ID)\n\n如果S挂了，那么服务就彻底不可用了，考虑到极端的情况：如果S所在的机房发生火灾、地震、磁盘损坏等情况，那么数据也就丢失了\n\n### 两台服务器\n当然一台服务发现S挂了，服务就会停止运行\n\n当然2台服务器我们首先想到的就是主从结构，S1做主，S2做从。执行在S1上执行，S1讲执行的Q通过binlog的方式同步到S2\n因此正常情况下Q在S1、S2上都会按照同样的顺序执行\n\n异常情况\n如果C写S1成功后，S1还未同步给S2，S1挂了，那么S1执行了，而S2未执行导致不一致\n\n显然造成的原因是S1的binlog未能顺利同步到S2，那么比较简单了\n\nC写S1后，S1先不给C返回，而是将binlog同步到S2，待S2确定后反馈给S1，这时S1才反馈给C\n\n但是这里有个特别大的问题就是，如果S2挂了，那么服务是不可用的\n\n### 3台服务器(多台)\n通过前面讨论，1台&2台服务器都是满足不了的，那么\n如果3台服务器，挂了一台能满足整个系统的可用性也是能满足条件的\n\n\n\n我们在一台服务中能看到典型的就是服务器挂掉后，服务就不可用了，自然我们能想到的就是用2台机器，如果一台挂了，那么\n1. 1台服务器(S)，C请求S失败了，那么C需要重试，当然如果有幂等情况，需要C自己保证(例如：Q=用户A给用户B转账5元，通常Q=用户A给用户B转账5元且唯一Id=123)\n2. 1台服务器(S)，如果S挂了，那么服务不可用\n3. 2台服务器主从(S1主, S2从)，C写S1(Q1)成功后返回给C成功了，S1还未同步到S2时，S1挂了，那么Q1将丢失\n4. 2台服务器主从(S1主, S2从)，C写S1(Q1)后，S1同步binlog到S2，S1挂了，那么Q1将丢失\n有如下业务场景\n```\nclient ----> server\n```","slug":"2022-12-28-raft","published":1,"updated":"2023-02-17T06:32:15.326Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bm0004gg4b0vft0yy2","content":"<h2 id=\"什么是一致性\"><a href=\"#什么是一致性\" class=\"headerlink\" title=\"什么是一致性\"></a>什么是一致性</h2><p>分布式系统中，一份数据一般会存在多个副本，要求多副本数据对于数据的更新与单份数据相同</p>\n<p>几点需要注意的</p>\n<ul>\n<li>如果是单机系统，通过锁与事务等机制就能保证一致性</li>\n<li>如果是分布式系统，数据如果只有一份并且这份数据固定在某台机器上，那么可以当成单机系统</li>\n<li>如果是分布式系统，数据如果只有一份并且这份数据可以在多个副本间迁移，那么在迁移过程中可以等待迁移完成，或者给访问者提示系统繁忙，稍后重试</li>\n<li>如果在某一时刻A&#x3D;3，然后被修改成了4，再次获取到的就是A&#x3D;4，这里就不是一致性讨论的问题了</li>\n</ul>\n<p>在客户端与分布式系统（包括单机系统）通过网络交互时，由于网络不可靠，存在3种可能</p>\n<ul>\n<li>客户端感知失败，分布式系统也失败，例如：客户端与系统网络不通</li>\n<li>客户端感知失败，分布式系统成功，例如：在分布式系统执行成功后，向客户端发送失败</li>\n<li>客户端感知成功，在这种情况下，我们默认会认为分布式系统是成功的，除非分布式系统出现bug</li>\n</ul>\n<p>注意当需要幂等时，这时需要客户端与服务端使用唯一标识符进行幂等操作</p>\n<h2 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h2><p>我们用客户端(C)请求服务端(S)的请求(Q)的各种情况说明为什么要这么做<br>C：客户端请求<br>S：服务器<br>Q：请求</p>\n<p>我们的Q可以是任意值，例如：uid1给uid2转账2元，</p>\n<h3 id=\"一台服务器\"><a href=\"#一台服务器\" class=\"headerlink\" title=\"一台服务器\"></a>一台服务器</h3><p>C请求S失败了，那么C需要重试，当然如果有幂等情况，需要C自己保证(例如：Q&#x3D;用户A给用户B转账5元，通常Q&#x3D;用户A给用户B转账5元且唯一Id&#x3D;唯一ID)</p>\n<p>如果S挂了，那么服务就彻底不可用了，考虑到极端的情况：如果S所在的机房发生火灾、地震、磁盘损坏等情况，那么数据也就丢失了</p>\n<h3 id=\"两台服务器\"><a href=\"#两台服务器\" class=\"headerlink\" title=\"两台服务器\"></a>两台服务器</h3><p>当然一台服务发现S挂了，服务就会停止运行</p>\n<p>当然2台服务器我们首先想到的就是主从结构，S1做主，S2做从。执行在S1上执行，S1讲执行的Q通过binlog的方式同步到S2<br>因此正常情况下Q在S1、S2上都会按照同样的顺序执行</p>\n<p>异常情况<br>如果C写S1成功后，S1还未同步给S2，S1挂了，那么S1执行了，而S2未执行导致不一致</p>\n<p>显然造成的原因是S1的binlog未能顺利同步到S2，那么比较简单了</p>\n<p>C写S1后，S1先不给C返回，而是将binlog同步到S2，待S2确定后反馈给S1，这时S1才反馈给C</p>\n<p>但是这里有个特别大的问题就是，如果S2挂了，那么服务是不可用的</p>\n<h3 id=\"3台服务器-多台\"><a href=\"#3台服务器-多台\" class=\"headerlink\" title=\"3台服务器(多台)\"></a>3台服务器(多台)</h3><p>通过前面讨论，1台&amp;2台服务器都是满足不了的，那么<br>如果3台服务器，挂了一台能满足整个系统的可用性也是能满足条件的</p>\n<p>我们在一台服务中能看到典型的就是服务器挂掉后，服务就不可用了，自然我们能想到的就是用2台机器，如果一台挂了，那么</p>\n<ol>\n<li>1台服务器(S)，C请求S失败了，那么C需要重试，当然如果有幂等情况，需要C自己保证(例如：Q&#x3D;用户A给用户B转账5元，通常Q&#x3D;用户A给用户B转账5元且唯一Id&#x3D;123)</li>\n<li>1台服务器(S)，如果S挂了，那么服务不可用</li>\n<li>2台服务器主从(S1主, S2从)，C写S1(Q1)成功后返回给C成功了，S1还未同步到S2时，S1挂了，那么Q1将丢失</li>\n<li>2台服务器主从(S1主, S2从)，C写S1(Q1)后，S1同步binlog到S2，S1挂了，那么Q1将丢失<br>有如下业务场景<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client ----&gt; server</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是一致性\"><a href=\"#什么是一致性\" class=\"headerlink\" title=\"什么是一致性\"></a>什么是一致性</h2><p>分布式系统中，一份数据一般会存在多个副本，要求多副本数据对于数据的更新与单份数据相同</p>\n<p>几点需要注意的</p>\n<ul>\n<li>如果是单机系统，通过锁与事务等机制就能保证一致性</li>\n<li>如果是分布式系统，数据如果只有一份并且这份数据固定在某台机器上，那么可以当成单机系统</li>\n<li>如果是分布式系统，数据如果只有一份并且这份数据可以在多个副本间迁移，那么在迁移过程中可以等待迁移完成，或者给访问者提示系统繁忙，稍后重试</li>\n<li>如果在某一时刻A&#x3D;3，然后被修改成了4，再次获取到的就是A&#x3D;4，这里就不是一致性讨论的问题了</li>\n</ul>\n<p>在客户端与分布式系统（包括单机系统）通过网络交互时，由于网络不可靠，存在3种可能</p>\n<ul>\n<li>客户端感知失败，分布式系统也失败，例如：客户端与系统网络不通</li>\n<li>客户端感知失败，分布式系统成功，例如：在分布式系统执行成功后，向客户端发送失败</li>\n<li>客户端感知成功，在这种情况下，我们默认会认为分布式系统是成功的，除非分布式系统出现bug</li>\n</ul>\n<p>注意当需要幂等时，这时需要客户端与服务端使用唯一标识符进行幂等操作</p>\n<h2 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h2><p>我们用客户端(C)请求服务端(S)的请求(Q)的各种情况说明为什么要这么做<br>C：客户端请求<br>S：服务器<br>Q：请求</p>\n<p>我们的Q可以是任意值，例如：uid1给uid2转账2元，</p>\n<h3 id=\"一台服务器\"><a href=\"#一台服务器\" class=\"headerlink\" title=\"一台服务器\"></a>一台服务器</h3><p>C请求S失败了，那么C需要重试，当然如果有幂等情况，需要C自己保证(例如：Q&#x3D;用户A给用户B转账5元，通常Q&#x3D;用户A给用户B转账5元且唯一Id&#x3D;唯一ID)</p>\n<p>如果S挂了，那么服务就彻底不可用了，考虑到极端的情况：如果S所在的机房发生火灾、地震、磁盘损坏等情况，那么数据也就丢失了</p>\n<h3 id=\"两台服务器\"><a href=\"#两台服务器\" class=\"headerlink\" title=\"两台服务器\"></a>两台服务器</h3><p>当然一台服务发现S挂了，服务就会停止运行</p>\n<p>当然2台服务器我们首先想到的就是主从结构，S1做主，S2做从。执行在S1上执行，S1讲执行的Q通过binlog的方式同步到S2<br>因此正常情况下Q在S1、S2上都会按照同样的顺序执行</p>\n<p>异常情况<br>如果C写S1成功后，S1还未同步给S2，S1挂了，那么S1执行了，而S2未执行导致不一致</p>\n<p>显然造成的原因是S1的binlog未能顺利同步到S2，那么比较简单了</p>\n<p>C写S1后，S1先不给C返回，而是将binlog同步到S2，待S2确定后反馈给S1，这时S1才反馈给C</p>\n<p>但是这里有个特别大的问题就是，如果S2挂了，那么服务是不可用的</p>\n<h3 id=\"3台服务器-多台\"><a href=\"#3台服务器-多台\" class=\"headerlink\" title=\"3台服务器(多台)\"></a>3台服务器(多台)</h3><p>通过前面讨论，1台&amp;2台服务器都是满足不了的，那么<br>如果3台服务器，挂了一台能满足整个系统的可用性也是能满足条件的</p>\n<p>我们在一台服务中能看到典型的就是服务器挂掉后，服务就不可用了，自然我们能想到的就是用2台机器，如果一台挂了，那么</p>\n<ol>\n<li>1台服务器(S)，C请求S失败了，那么C需要重试，当然如果有幂等情况，需要C自己保证(例如：Q&#x3D;用户A给用户B转账5元，通常Q&#x3D;用户A给用户B转账5元且唯一Id&#x3D;123)</li>\n<li>1台服务器(S)，如果S挂了，那么服务不可用</li>\n<li>2台服务器主从(S1主, S2从)，C写S1(Q1)成功后返回给C成功了，S1还未同步到S2时，S1挂了，那么Q1将丢失</li>\n<li>2台服务器主从(S1主, S2从)，C写S1(Q1)后，S1同步binlog到S2，S1挂了，那么Q1将丢失<br>有如下业务场景<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client ----&gt; server</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"layout":"post","title":"golang grpc response biz err","date":"2022-11-20T16:00:00.000Z","_content":"\n## 背景\n\n我们的服务调用提供的方式如下图\n\n![useful image]({{ site.url }}/assets/2023-02-10/basic.png)\n\n我们也遇到了服务层怎么返回错误到接入层产生了分歧，目前有的3种方案解决\n\n### 通用方案\n\n#### err\n直接在err中返回，这里我们需要自定义err，并实现`GRPCStatus`方法\n```go\ntype ERR struct {\n    Code uint32\n    Msg  string\n}\nfunc (p ERR) GRPCStatus() *status.Status {\n    return status.New(codes.Code(p.Code), p.Msg)\n}\nfunc (p ERR) Error() string {\n    return p.Msg\n}\n```\n\n在返回时使用\n```go\nfunc (s *grpcServer) SayHello(ctx context.Context, in *proto.HelloRequest) (*proto.HelloReply, error) {\n    return nil, ERR{\n        Code: 100_20_01,\n        Msg:  \"add_reach_max\",\n    }\n}\n```\n\n使用这种方式有如下优缺点 \n\n优点：复用grpc标准的错误，简单方便\n\n缺点：耦合了grpc标准的错误，业务上需要区分是grpc的错误，还是业务错误，grpc gateway可能会修改code\n\n\n#### message\n```protobuf\nmessage BatchUserInfoResp {\n  RpcHeader header = 1;\n  repeated UserInfo infos = 2;\n}\n```\n\n这里需要引入\n```protobuf\nmessage RpcHeader {\n  int32 code = 1;\n  string message = 2;\n}\n```\n\n\n\n#### metadata+middleware\n","source":"_posts/2023-02-10-grpc-biz-err.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"golang grpc response biz err\"\n\ndate:   2022-11-21\n\ncategories: golang\n\n---\n\n## 背景\n\n我们的服务调用提供的方式如下图\n\n![useful image]({{ site.url }}/assets/2023-02-10/basic.png)\n\n我们也遇到了服务层怎么返回错误到接入层产生了分歧，目前有的3种方案解决\n\n### 通用方案\n\n#### err\n直接在err中返回，这里我们需要自定义err，并实现`GRPCStatus`方法\n```go\ntype ERR struct {\n    Code uint32\n    Msg  string\n}\nfunc (p ERR) GRPCStatus() *status.Status {\n    return status.New(codes.Code(p.Code), p.Msg)\n}\nfunc (p ERR) Error() string {\n    return p.Msg\n}\n```\n\n在返回时使用\n```go\nfunc (s *grpcServer) SayHello(ctx context.Context, in *proto.HelloRequest) (*proto.HelloReply, error) {\n    return nil, ERR{\n        Code: 100_20_01,\n        Msg:  \"add_reach_max\",\n    }\n}\n```\n\n使用这种方式有如下优缺点 \n\n优点：复用grpc标准的错误，简单方便\n\n缺点：耦合了grpc标准的错误，业务上需要区分是grpc的错误，还是业务错误，grpc gateway可能会修改code\n\n\n#### message\n```protobuf\nmessage BatchUserInfoResp {\n  RpcHeader header = 1;\n  repeated UserInfo infos = 2;\n}\n```\n\n这里需要引入\n```protobuf\nmessage RpcHeader {\n  int32 code = 1;\n  string message = 2;\n}\n```\n\n\n\n#### metadata+middleware\n","slug":"2023-02-10-grpc-biz-err","published":1,"updated":"2023-02-17T05:38:53.955Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bm0005gg4b6u90gjvx","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>我们的服务调用提供的方式如下图</p>\n<p>![useful image](&#x2F;assets&#x2F;2023-02-10&#x2F;basic.png)</p>\n<p>我们也遇到了服务层怎么返回错误到接入层产生了分歧，目前有的3种方案解决</p>\n<h3 id=\"通用方案\"><a href=\"#通用方案\" class=\"headerlink\" title=\"通用方案\"></a>通用方案</h3><h4 id=\"err\"><a href=\"#err\" class=\"headerlink\" title=\"err\"></a>err</h4><p>直接在err中返回，这里我们需要自定义err，并实现<code>GRPCStatus</code>方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ERR <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Code <span class=\"type\">uint32</span></span><br><span class=\"line\">    Msg  <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p ERR)</span></span> GRPCStatus() *status.Status &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status.New(codes.Code(p.Code), p.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p ERR)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.Msg</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在返回时使用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *grpcServer)</span></span> SayHello(ctx context.Context, in *proto.HelloRequest) (*proto.HelloReply, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, ERR&#123;</span><br><span class=\"line\">        Code: <span class=\"number\">100</span>_20_01,</span><br><span class=\"line\">        Msg:  <span class=\"string\">&quot;add_reach_max&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式有如下优缺点 </p>\n<p>优点：复用grpc标准的错误，简单方便</p>\n<p>缺点：耦合了grpc标准的错误，业务上需要区分是grpc的错误，还是业务错误，grpc gateway可能会修改code</p>\n<h4 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h4><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">BatchUserInfoResp</span> &#123;</span><br><span class=\"line\">  RpcHeader header = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> UserInfo infos = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里需要引入</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">RpcHeader</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int32</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"metadata-middleware\"><a href=\"#metadata-middleware\" class=\"headerlink\" title=\"metadata+middleware\"></a>metadata+middleware</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>我们的服务调用提供的方式如下图</p>\n<p>![useful image](&#x2F;assets&#x2F;2023-02-10&#x2F;basic.png)</p>\n<p>我们也遇到了服务层怎么返回错误到接入层产生了分歧，目前有的3种方案解决</p>\n<h3 id=\"通用方案\"><a href=\"#通用方案\" class=\"headerlink\" title=\"通用方案\"></a>通用方案</h3><h4 id=\"err\"><a href=\"#err\" class=\"headerlink\" title=\"err\"></a>err</h4><p>直接在err中返回，这里我们需要自定义err，并实现<code>GRPCStatus</code>方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ERR <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Code <span class=\"type\">uint32</span></span><br><span class=\"line\">    Msg  <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p ERR)</span></span> GRPCStatus() *status.Status &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status.New(codes.Code(p.Code), p.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p ERR)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.Msg</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在返回时使用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *grpcServer)</span></span> SayHello(ctx context.Context, in *proto.HelloRequest) (*proto.HelloReply, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, ERR&#123;</span><br><span class=\"line\">        Code: <span class=\"number\">100</span>_20_01,</span><br><span class=\"line\">        Msg:  <span class=\"string\">&quot;add_reach_max&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式有如下优缺点 </p>\n<p>优点：复用grpc标准的错误，简单方便</p>\n<p>缺点：耦合了grpc标准的错误，业务上需要区分是grpc的错误，还是业务错误，grpc gateway可能会修改code</p>\n<h4 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h4><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">BatchUserInfoResp</span> &#123;</span><br><span class=\"line\">  RpcHeader header = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> UserInfo infos = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里需要引入</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">RpcHeader</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int32</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"metadata-middleware\"><a href=\"#metadata-middleware\" class=\"headerlink\" title=\"metadata+middleware\"></a>metadata+middleware</h4>"},{"layout":"post","title":"lcs","date":"2022-12-18T16:00:00.000Z","_content":"\n## 原始代码\n\n对于一个算法题目，我们通常是用几个示例来暴力破解\n\n题目中有3个示例\n* `abcde` 与 `ace` lcs = 3\n* `abc` 与 `abc` lcs = 3\n* `abc` 与 `def` lcs = 3\n\n显然给出的第一个是一个常规示例，第二个、第三个是边界条件\n\n当然给出的示例，我们一想就能看出来 lcs = 3，就像我们学习算法时，给出几个数字，我们一眼就能看到出排序后的结果\n\n我们假设是s1与s2，它们的长度分别为m与n\n对于最后一个字符s1[m-1],s2[n-1]\n存在2种情况\n1. s1[m-1] == s2[n-1]，当然这是我们最想看到的情况，那么lcs一定包含最后一个字符\n   其中尽管会出现例如abc与abcc这样的字符串，我们也能使用abc与ab~~c~~c\n2. \n假设s1[m-1] == s2[n-1]\n首先我们思考，如果需要找到s1与s2 lcs，如果\n\n首先 abcde 与 ace当我们看到第一个字母时，这个字母一定是我们求的值的一部分\n虽然我们可能会遇到 `aa`与`a`， `aaa`与`aa`\n\n\n\n那么我们只需要匹配 `bcde` 与 `ce`, 这时 b与c不相等了，这时摆在我们面前3种选择了\n* b不在我们求的lcs\n* c不在我们求的lcs\n* b与c都不在我们求的lcs\n\nlcs('abcde', 'ace') = 1 + max(lcs(\"cde\", \"ce\"), lcs(\"bcde\", \"e\"), lcs(\"cde\", \"e\"))\n* 对于 lcs(\"cde\", \"ce\")\n  * \n\n* 'a' + lcs(\"cde\", \"ce\") -- 删除串1第一个字符\n* 'a' + lcs(\"bcde\", \"e\") -- 删除串2第一个字符\n* 'a' + lcs(\"cde\", \"e\") --同时删除串1、串2第一个字符\n\n这时需要递归处理了\n\n注意这种情况，abbc, acbb，当\n\n\n\n\n```\n\t#\ta\tb\tc\td\te\n#\t0\t0\t0\t0\t0\t0\na\t0\t1\t1\t1\t1\t1\nc\t0\t1\t1\t2\t2\t2\ne\t0\t1\t1\t2\t2\t3\n```\n\n\n\n\n\n\n\n\n\n```\n反推：\n    if s1[i] == s2[j] {\n        dp[i][j] = 1 + helper(s1[i-1], s2[j-2])\n    } else {\n        dp[i][j] = max(\n            helper(s1[i], s2[j-1])\n            helper(s1[i-1], s2[j])\n            helper(s1[i-1], s2[j-1])\n        )\n    }\n正推\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2022-12-19-lcs.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"lcs\"\n\ndate:   2022-12-19\n\ncategories: algorithm\n\n---\n\n## 原始代码\n\n对于一个算法题目，我们通常是用几个示例来暴力破解\n\n题目中有3个示例\n* `abcde` 与 `ace` lcs = 3\n* `abc` 与 `abc` lcs = 3\n* `abc` 与 `def` lcs = 3\n\n显然给出的第一个是一个常规示例，第二个、第三个是边界条件\n\n当然给出的示例，我们一想就能看出来 lcs = 3，就像我们学习算法时，给出几个数字，我们一眼就能看到出排序后的结果\n\n我们假设是s1与s2，它们的长度分别为m与n\n对于最后一个字符s1[m-1],s2[n-1]\n存在2种情况\n1. s1[m-1] == s2[n-1]，当然这是我们最想看到的情况，那么lcs一定包含最后一个字符\n   其中尽管会出现例如abc与abcc这样的字符串，我们也能使用abc与ab~~c~~c\n2. \n假设s1[m-1] == s2[n-1]\n首先我们思考，如果需要找到s1与s2 lcs，如果\n\n首先 abcde 与 ace当我们看到第一个字母时，这个字母一定是我们求的值的一部分\n虽然我们可能会遇到 `aa`与`a`， `aaa`与`aa`\n\n\n\n那么我们只需要匹配 `bcde` 与 `ce`, 这时 b与c不相等了，这时摆在我们面前3种选择了\n* b不在我们求的lcs\n* c不在我们求的lcs\n* b与c都不在我们求的lcs\n\nlcs('abcde', 'ace') = 1 + max(lcs(\"cde\", \"ce\"), lcs(\"bcde\", \"e\"), lcs(\"cde\", \"e\"))\n* 对于 lcs(\"cde\", \"ce\")\n  * \n\n* 'a' + lcs(\"cde\", \"ce\") -- 删除串1第一个字符\n* 'a' + lcs(\"bcde\", \"e\") -- 删除串2第一个字符\n* 'a' + lcs(\"cde\", \"e\") --同时删除串1、串2第一个字符\n\n这时需要递归处理了\n\n注意这种情况，abbc, acbb，当\n\n\n\n\n```\n\t#\ta\tb\tc\td\te\n#\t0\t0\t0\t0\t0\t0\na\t0\t1\t1\t1\t1\t1\nc\t0\t1\t1\t2\t2\t2\ne\t0\t1\t1\t2\t2\t3\n```\n\n\n\n\n\n\n\n\n\n```\n反推：\n    if s1[i] == s2[j] {\n        dp[i][j] = 1 + helper(s1[i-1], s2[j-2])\n    } else {\n        dp[i][j] = max(\n            helper(s1[i], s2[j-1])\n            helper(s1[i-1], s2[j])\n            helper(s1[i-1], s2[j-1])\n        )\n    }\n正推\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2022-12-19-lcs","published":1,"updated":"2023-02-06T10:59:35.223Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bn0007gg4b1arlgaaj","content":"<h2 id=\"原始代码\"><a href=\"#原始代码\" class=\"headerlink\" title=\"原始代码\"></a>原始代码</h2><p>对于一个算法题目，我们通常是用几个示例来暴力破解</p>\n<p>题目中有3个示例</p>\n<ul>\n<li><code>abcde</code> 与 <code>ace</code> lcs &#x3D; 3</li>\n<li><code>abc</code> 与 <code>abc</code> lcs &#x3D; 3</li>\n<li><code>abc</code> 与 <code>def</code> lcs &#x3D; 3</li>\n</ul>\n<p>显然给出的第一个是一个常规示例，第二个、第三个是边界条件</p>\n<p>当然给出的示例，我们一想就能看出来 lcs &#x3D; 3，就像我们学习算法时，给出几个数字，我们一眼就能看到出排序后的结果</p>\n<p>我们假设是s1与s2，它们的长度分别为m与n<br>对于最后一个字符s1[m-1],s2[n-1]<br>存在2种情况</p>\n<ol>\n<li>s1[m-1] &#x3D;&#x3D; s2[n-1]，当然这是我们最想看到的情况，那么lcs一定包含最后一个字符<br>其中尽管会出现例如abc与abcc这样的字符串，我们也能使用abc与ab<del>c</del>c</li>\n<li>假设s1[m-1] &#x3D;&#x3D; s2[n-1]<br>首先我们思考，如果需要找到s1与s2 lcs，如果</li>\n</ol>\n<p>首先 abcde 与 ace当我们看到第一个字母时，这个字母一定是我们求的值的一部分<br>虽然我们可能会遇到 <code>aa</code>与<code>a</code>， <code>aaa</code>与<code>aa</code></p>\n<p>那么我们只需要匹配 <code>bcde</code> 与 <code>ce</code>, 这时 b与c不相等了，这时摆在我们面前3种选择了</p>\n<ul>\n<li>b不在我们求的lcs</li>\n<li>c不在我们求的lcs</li>\n<li>b与c都不在我们求的lcs</li>\n</ul>\n<p>lcs(‘abcde’, ‘ace’) &#x3D; 1 + max(lcs(“cde”, “ce”), lcs(“bcde”, “e”), lcs(“cde”, “e”))</p>\n<ul>\n<li><p>对于 lcs(“cde”, “ce”)<br>* </p>\n</li>\n<li><p>‘a’ + lcs(“cde”, “ce”) – 删除串1第一个字符</p>\n</li>\n<li><p>‘a’ + lcs(“bcde”, “e”) – 删除串2第一个字符</p>\n</li>\n<li><p>‘a’ + lcs(“cde”, “e”) –同时删除串1、串2第一个字符</p>\n</li>\n</ul>\n<p>这时需要递归处理了</p>\n<p>注意这种情况，abbc, acbb，当</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t#\ta\tb\tc\td\te</span><br><span class=\"line\">#\t0\t0\t0\t0\t0\t0</span><br><span class=\"line\">a\t0\t1\t1\t1\t1\t1</span><br><span class=\"line\">c\t0\t1\t1\t2\t2\t2</span><br><span class=\"line\">e\t0\t1\t1\t2\t2\t3</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">反推：</span><br><span class=\"line\">    if s1[i] == s2[j] &#123;</span><br><span class=\"line\">        dp[i][j] = 1 + helper(s1[i-1], s2[j-2])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        dp[i][j] = max(</span><br><span class=\"line\">            helper(s1[i], s2[j-1])</span><br><span class=\"line\">            helper(s1[i-1], s2[j])</span><br><span class=\"line\">            helper(s1[i-1], s2[j-1])</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">正推</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原始代码\"><a href=\"#原始代码\" class=\"headerlink\" title=\"原始代码\"></a>原始代码</h2><p>对于一个算法题目，我们通常是用几个示例来暴力破解</p>\n<p>题目中有3个示例</p>\n<ul>\n<li><code>abcde</code> 与 <code>ace</code> lcs &#x3D; 3</li>\n<li><code>abc</code> 与 <code>abc</code> lcs &#x3D; 3</li>\n<li><code>abc</code> 与 <code>def</code> lcs &#x3D; 3</li>\n</ul>\n<p>显然给出的第一个是一个常规示例，第二个、第三个是边界条件</p>\n<p>当然给出的示例，我们一想就能看出来 lcs &#x3D; 3，就像我们学习算法时，给出几个数字，我们一眼就能看到出排序后的结果</p>\n<p>我们假设是s1与s2，它们的长度分别为m与n<br>对于最后一个字符s1[m-1],s2[n-1]<br>存在2种情况</p>\n<ol>\n<li>s1[m-1] &#x3D;&#x3D; s2[n-1]，当然这是我们最想看到的情况，那么lcs一定包含最后一个字符<br>其中尽管会出现例如abc与abcc这样的字符串，我们也能使用abc与ab<del>c</del>c</li>\n<li>假设s1[m-1] &#x3D;&#x3D; s2[n-1]<br>首先我们思考，如果需要找到s1与s2 lcs，如果</li>\n</ol>\n<p>首先 abcde 与 ace当我们看到第一个字母时，这个字母一定是我们求的值的一部分<br>虽然我们可能会遇到 <code>aa</code>与<code>a</code>， <code>aaa</code>与<code>aa</code></p>\n<p>那么我们只需要匹配 <code>bcde</code> 与 <code>ce</code>, 这时 b与c不相等了，这时摆在我们面前3种选择了</p>\n<ul>\n<li>b不在我们求的lcs</li>\n<li>c不在我们求的lcs</li>\n<li>b与c都不在我们求的lcs</li>\n</ul>\n<p>lcs(‘abcde’, ‘ace’) &#x3D; 1 + max(lcs(“cde”, “ce”), lcs(“bcde”, “e”), lcs(“cde”, “e”))</p>\n<ul>\n<li><p>对于 lcs(“cde”, “ce”)<br>* </p>\n</li>\n<li><p>‘a’ + lcs(“cde”, “ce”) – 删除串1第一个字符</p>\n</li>\n<li><p>‘a’ + lcs(“bcde”, “e”) – 删除串2第一个字符</p>\n</li>\n<li><p>‘a’ + lcs(“cde”, “e”) –同时删除串1、串2第一个字符</p>\n</li>\n</ul>\n<p>这时需要递归处理了</p>\n<p>注意这种情况，abbc, acbb，当</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t#\ta\tb\tc\td\te</span><br><span class=\"line\">#\t0\t0\t0\t0\t0\t0</span><br><span class=\"line\">a\t0\t1\t1\t1\t1\t1</span><br><span class=\"line\">c\t0\t1\t1\t2\t2\t2</span><br><span class=\"line\">e\t0\t1\t1\t2\t2\t3</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">反推：</span><br><span class=\"line\">    if s1[i] == s2[j] &#123;</span><br><span class=\"line\">        dp[i][j] = 1 + helper(s1[i-1], s2[j-2])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        dp[i][j] = max(</span><br><span class=\"line\">            helper(s1[i], s2[j-1])</span><br><span class=\"line\">            helper(s1[i-1], s2[j])</span><br><span class=\"line\">            helper(s1[i-1], s2[j-1])</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">正推</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"layout":"post","title":"目录","date":"2023-02-16T16:00:00.000Z","_content":"\n\n计划归纳从一条`insert into user(name, age) values(\"pangbian\", 33)`是如何执行处理的","source":"_posts/2023-02-17-mysql-content.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"目录\"\n\ndate:   2023-02-17\n\ncategories: mysql\n\n---\n\n\n计划归纳从一条`insert into user(name, age) values(\"pangbian\", 33)`是如何执行处理的","slug":"2023-02-17-mysql-content","published":1,"updated":"2023-02-17T05:37:12.160Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bn0008gg4bbkrl4511","content":"<p>计划归纳从一条<code>insert into user(name, age) values(&quot;pangbian&quot;, 33)</code>是如何执行处理的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>计划归纳从一条<code>insert into user(name, age) values(&quot;pangbian&quot;, 33)</code>是如何执行处理的</p>\n"},{"layout":"post","title":"计算最近一段时间的总数量","date":"2023-05-05T16:00:00.000Z","_content":"\n## 背景\n最近有一个业务需求：计算最近24小时、最近3天的id数量\n\n## 解决方案\n\n### 方案一\n如果使用MySQL，当然很方便，记录数据`id,ctime`, 直接使用`select count(id) from xx where ctime > yy`即可，\n显然当查询的`ctime`比较短&数据量比较小时，直接命中覆盖索引会非常快，当时当`ctime`比较长&数据量比较多时会比较慢\n\n### 方案二\n我们存储本来一开始就是使用Redis来存储的，最开始计划的是使用`key_20230506`这样的key来存储每天的数据量。\n但是这种方式会带来如下2个问题\n1. 数据不准(可能多统计0~24小时的数据)\n2. 查询多天数据时需要批量获取与求和操作\n\n### 方案三\n直接使用Redis的zset来进行存储：`zadd key score member`，使用当前毫秒作为score\n计算时使用zcount很方便，例如计算最近3天的总量：`zcount key (now-3d) +inf`。\nzcount时间复杂度为`log(n)`是完全足够的\n\n## 总结\n当遇到区间问题时，Redis的zset提供了这样的功能，不知道Redis提供了哪些功能，可以把[Redis Commands](https://redis.io/commands/)所有命令翻一遍","source":"_posts/2023-05-06-redis-zcount.md","raw":"---\nlayout: post\ntitle:  \"计算最近一段时间的总数量\"\ndate:   2023-05-06\ncategories: [redis]\n---\n\n## 背景\n最近有一个业务需求：计算最近24小时、最近3天的id数量\n\n## 解决方案\n\n### 方案一\n如果使用MySQL，当然很方便，记录数据`id,ctime`, 直接使用`select count(id) from xx where ctime > yy`即可，\n显然当查询的`ctime`比较短&数据量比较小时，直接命中覆盖索引会非常快，当时当`ctime`比较长&数据量比较多时会比较慢\n\n### 方案二\n我们存储本来一开始就是使用Redis来存储的，最开始计划的是使用`key_20230506`这样的key来存储每天的数据量。\n但是这种方式会带来如下2个问题\n1. 数据不准(可能多统计0~24小时的数据)\n2. 查询多天数据时需要批量获取与求和操作\n\n### 方案三\n直接使用Redis的zset来进行存储：`zadd key score member`，使用当前毫秒作为score\n计算时使用zcount很方便，例如计算最近3天的总量：`zcount key (now-3d) +inf`。\nzcount时间复杂度为`log(n)`是完全足够的\n\n## 总结\n当遇到区间问题时，Redis的zset提供了这样的功能，不知道Redis提供了哪些功能，可以把[Redis Commands](https://redis.io/commands/)所有命令翻一遍","slug":"2023-05-06-redis-zcount","published":1,"updated":"2023-05-06T10:06:01.933Z","_id":"clhbtg9bo000bgg4b58prbz2p","comments":1,"photos":[],"link":"","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近有一个业务需求：计算最近24小时、最近3天的id数量</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>如果使用MySQL，当然很方便，记录数据<code>id,ctime</code>, 直接使用<code>select count(id) from xx where ctime &gt; yy</code>即可，<br>显然当查询的<code>ctime</code>比较短&amp;数据量比较小时，直接命中覆盖索引会非常快，当时当<code>ctime</code>比较长&amp;数据量比较多时会比较慢</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>我们存储本来一开始就是使用Redis来存储的，最开始计划的是使用<code>key_20230506</code>这样的key来存储每天的数据量。<br>但是这种方式会带来如下2个问题</p>\n<ol>\n<li>数据不准(可能多统计0~24小时的数据)</li>\n<li>查询多天数据时需要批量获取与求和操作</li>\n</ol>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h3><p>直接使用Redis的zset来进行存储：<code>zadd key score member</code>，使用当前毫秒作为score<br>计算时使用zcount很方便，例如计算最近3天的总量：<code>zcount key (now-3d) +inf</code>。<br>zcount时间复杂度为<code>log(n)</code>是完全足够的</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当遇到区间问题时，Redis的zset提供了这样的功能，不知道Redis提供了哪些功能，可以把<a href=\"https://redis.io/commands/\">Redis Commands</a>所有命令翻一遍</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近有一个业务需求：计算最近24小时、最近3天的id数量</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>如果使用MySQL，当然很方便，记录数据<code>id,ctime</code>, 直接使用<code>select count(id) from xx where ctime &gt; yy</code>即可，<br>显然当查询的<code>ctime</code>比较短&amp;数据量比较小时，直接命中覆盖索引会非常快，当时当<code>ctime</code>比较长&amp;数据量比较多时会比较慢</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>我们存储本来一开始就是使用Redis来存储的，最开始计划的是使用<code>key_20230506</code>这样的key来存储每天的数据量。<br>但是这种方式会带来如下2个问题</p>\n<ol>\n<li>数据不准(可能多统计0~24小时的数据)</li>\n<li>查询多天数据时需要批量获取与求和操作</li>\n</ol>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h3><p>直接使用Redis的zset来进行存储：<code>zadd key score member</code>，使用当前毫秒作为score<br>计算时使用zcount很方便，例如计算最近3天的总量：<code>zcount key (now-3d) +inf</code>。<br>zcount时间复杂度为<code>log(n)</code>是完全足够的</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当遇到区间问题时，Redis的zset提供了这样的功能，不知道Redis提供了哪些功能，可以把<a href=\"https://redis.io/commands/\">Redis Commands</a>所有命令翻一遍</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\nmysql源码编译安装\n\n### 官方文档\n\n[https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html](../2023-02-17-mysql-content.md)\n\n### 开启debug模式\n\n当mysqld运行时，需要指定参数`--debug`，那么在生成`/tmp/mysqld.trace` 文件，像官网提示的那样，该文件非常大\n\n我们需要在执行时\n\n```log\nT@8: | | | <vio_io_wait\nT@8: | | <vio_ssl_read\nT@8: | <net_read_raw_loop\nT@8: | THD::enter_stage: 'starting' /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103\nT@8: | >PROFILING::status_change\n...\nT@8: | | | | | | <void handler::column_bitmaps_signal\nT@8: | | | | | | >validate_default_values_of_unset_fields\nT@8: | | | | | | <validate_default_values_of_unset_fields\nT@8: | | | | | | >fill_record\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | <fill_record\nT@8: | | | | | | >write_record\nT@8: | | | | | | | >handler::ha_write_row\nT@8: | | | | | | | | >int ha_innobase::write_row\nT@8: | | | | | | | | | >handler::update_auto_increment\nT@8: | | | | | | | | | | >ha_innobase::update_thd\nT@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -> 0x12880e200\nT@8: | | | | | | | | | | | >innobase_trx_init\nT@8: | | | | | | | | | | | <innobase_trx_init\nT@8: | | | | | | | | | | <ha_innobase::update_thd\nT@8: | | | | | | | | | | >ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | <ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | info: auto_increment: 2\nT@8: | | | | | | | | | | info: auto_increment: next value 3\nT@8: | | | | | | | | | <handler::update_auto_increment\nT@8: | | | | | | | | | >row_ins\nT@8: | | | | | | | | | | row_ins: table: demo/user_info\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_clust_index_entry\nT@8: | | | | | | | | | | | | >row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | <btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): {[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)}\nT@8: | | | | | | | | | | | | <row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | <row_ins_clust_index_entry\nT@8: | | | | | | | | | | <row_ins_index_entry_step\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_sec_index_entry_low\nT@8: | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | <btr_cur_search_to_nth_level\n...\n```\n\n### 调试程序\n\n虽然有debug日志，但是信息还是比较少的，当需要\n\n#### clion\n\nclion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如\n\n#### gdb(lldb)\n\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-1-1.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\nmysql源码编译安装\n\n### 官方文档\n\n[https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html](../2023-02-17-mysql-content.md)\n\n### 开启debug模式\n\n当mysqld运行时，需要指定参数`--debug`，那么在生成`/tmp/mysqld.trace` 文件，像官网提示的那样，该文件非常大\n\n我们需要在执行时\n\n```log\nT@8: | | | <vio_io_wait\nT@8: | | <vio_ssl_read\nT@8: | <net_read_raw_loop\nT@8: | THD::enter_stage: 'starting' /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103\nT@8: | >PROFILING::status_change\n...\nT@8: | | | | | | <void handler::column_bitmaps_signal\nT@8: | | | | | | >validate_default_values_of_unset_fields\nT@8: | | | | | | <validate_default_values_of_unset_fields\nT@8: | | | | | | >fill_record\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | <fill_record\nT@8: | | | | | | >write_record\nT@8: | | | | | | | >handler::ha_write_row\nT@8: | | | | | | | | >int ha_innobase::write_row\nT@8: | | | | | | | | | >handler::update_auto_increment\nT@8: | | | | | | | | | | >ha_innobase::update_thd\nT@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -> 0x12880e200\nT@8: | | | | | | | | | | | >innobase_trx_init\nT@8: | | | | | | | | | | | <innobase_trx_init\nT@8: | | | | | | | | | | <ha_innobase::update_thd\nT@8: | | | | | | | | | | >ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | <ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | info: auto_increment: 2\nT@8: | | | | | | | | | | info: auto_increment: next value 3\nT@8: | | | | | | | | | <handler::update_auto_increment\nT@8: | | | | | | | | | >row_ins\nT@8: | | | | | | | | | | row_ins: table: demo/user_info\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_clust_index_entry\nT@8: | | | | | | | | | | | | >row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | <btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): {[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)}\nT@8: | | | | | | | | | | | | <row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | <row_ins_clust_index_entry\nT@8: | | | | | | | | | | <row_ins_index_entry_step\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_sec_index_entry_low\nT@8: | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | <btr_cur_search_to_nth_level\n...\n```\n\n### 调试程序\n\n虽然有debug日志，但是信息还是比较少的，当需要\n\n#### clion\n\nclion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如\n\n#### gdb(lldb)\n\n\n\n\n","slug":"mysql/2023-02-17-mysql-1-1","published":1,"updated":"2023-05-06T09:23:51.762Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bo000dgg4bc4208nnv","content":"<p>mysql源码编译安装</p>\n<h3 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h3><p><a href=\"../2023-02-17-mysql-content.md\">https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html</a></p>\n<h3 id=\"开启debug模式\"><a href=\"#开启debug模式\" class=\"headerlink\" title=\"开启debug模式\"></a>开启debug模式</h3><p>当mysqld运行时，需要指定参数<code>--debug</code>，那么在生成<code>/tmp/mysqld.trace</code> 文件，像官网提示的那样，该文件非常大</p>\n<p>我们需要在执行时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T@8: | | | &lt;vio_io_wait</span><br><span class=\"line\">T@8: | | &lt;vio_ssl_read</span><br><span class=\"line\">T@8: | &lt;net_read_raw_loop</span><br><span class=\"line\">T@8: | THD::enter_stage: &#x27;starting&#x27; /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103</span><br><span class=\"line\">T@8: | &gt;PROFILING::status_change</span><br><span class=\"line\">...</span><br><span class=\"line\">T@8: | | | | | | &lt;void handler::column_bitmaps_signal</span><br><span class=\"line\">T@8: | | | | | | &gt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &lt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &gt;fill_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | &lt;fill_record</span><br><span class=\"line\">T@8: | | | | | | &gt;write_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;handler::ha_write_row</span><br><span class=\"line\">T@8: | | | | | | | | &gt;int ha_innobase::write_row</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -&gt; 0x12880e200</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: 2</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: next value 3</span><br><span class=\"line\">T@8: | | | | | | | | | &lt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;row_ins</span><br><span class=\"line\">T@8: | | | | | | | | | | row_ins: table: demo/user_info</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): &#123;[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)&#125;</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_sec_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试程序\"><a href=\"#调试程序\" class=\"headerlink\" title=\"调试程序\"></a>调试程序</h3><p>虽然有debug日志，但是信息还是比较少的，当需要</p>\n<h4 id=\"clion\"><a href=\"#clion\" class=\"headerlink\" title=\"clion\"></a>clion</h4><p>clion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如</p>\n<h4 id=\"gdb-lldb\"><a href=\"#gdb-lldb\" class=\"headerlink\" title=\"gdb(lldb)\"></a>gdb(lldb)</h4>","site":{"data":{}},"excerpt":"","more":"<p>mysql源码编译安装</p>\n<h3 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h3><p><a href=\"../2023-02-17-mysql-content.md\">https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html</a></p>\n<h3 id=\"开启debug模式\"><a href=\"#开启debug模式\" class=\"headerlink\" title=\"开启debug模式\"></a>开启debug模式</h3><p>当mysqld运行时，需要指定参数<code>--debug</code>，那么在生成<code>/tmp/mysqld.trace</code> 文件，像官网提示的那样，该文件非常大</p>\n<p>我们需要在执行时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T@8: | | | &lt;vio_io_wait</span><br><span class=\"line\">T@8: | | &lt;vio_ssl_read</span><br><span class=\"line\">T@8: | &lt;net_read_raw_loop</span><br><span class=\"line\">T@8: | THD::enter_stage: &#x27;starting&#x27; /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103</span><br><span class=\"line\">T@8: | &gt;PROFILING::status_change</span><br><span class=\"line\">...</span><br><span class=\"line\">T@8: | | | | | | &lt;void handler::column_bitmaps_signal</span><br><span class=\"line\">T@8: | | | | | | &gt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &lt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &gt;fill_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | &lt;fill_record</span><br><span class=\"line\">T@8: | | | | | | &gt;write_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;handler::ha_write_row</span><br><span class=\"line\">T@8: | | | | | | | | &gt;int ha_innobase::write_row</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -&gt; 0x12880e200</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: 2</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: next value 3</span><br><span class=\"line\">T@8: | | | | | | | | | &lt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;row_ins</span><br><span class=\"line\">T@8: | | | | | | | | | | row_ins: table: demo/user_info</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): &#123;[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)&#125;</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_sec_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试程序\"><a href=\"#调试程序\" class=\"headerlink\" title=\"调试程序\"></a>调试程序</h3><p>虽然有debug日志，但是信息还是比较少的，当需要</p>\n<h4 id=\"clion\"><a href=\"#clion\" class=\"headerlink\" title=\"clion\"></a>clion</h4><p>clion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如</p>\n<h4 id=\"gdb-lldb\"><a href=\"#gdb-lldb\" class=\"headerlink\" title=\"gdb(lldb)\"></a>gdb(lldb)</h4>"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\nmysql的连接管理\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-2-2.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\nmysql的连接管理\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-2-2","published":1,"updated":"2023-03-03T03:23:32.806Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bo000ggg4b5yd6atac","content":"<p>mysql的连接管理</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>mysql的连接管理</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n对于像Mysql这样的大型项目，我们\n\n### 官方文档\n\n[https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html](../2023-02-17-mysql-content.md)\n\n### 开启debug模式\n\n当mysqld运行时，需要指定参数`--debug`，那么在生成`/tmp/mysqld.trace` 文件，像官网提示的那样，该文件非常大\n\n我们需要在执行时\n\n```log\nT@8: | | | <vio_io_wait\nT@8: | | <vio_ssl_read\nT@8: | <net_read_raw_loop\nT@8: | THD::enter_stage: 'starting' /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103\nT@8: | >PROFILING::status_change\n...\nT@8: | | | | | | <void handler::column_bitmaps_signal\nT@8: | | | | | | >validate_default_values_of_unset_fields\nT@8: | | | | | | <validate_default_values_of_unset_fields\nT@8: | | | | | | >fill_record\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | <fill_record\nT@8: | | | | | | >write_record\nT@8: | | | | | | | >handler::ha_write_row\nT@8: | | | | | | | | >int ha_innobase::write_row\nT@8: | | | | | | | | | >handler::update_auto_increment\nT@8: | | | | | | | | | | >ha_innobase::update_thd\nT@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -> 0x12880e200\nT@8: | | | | | | | | | | | >innobase_trx_init\nT@8: | | | | | | | | | | | <innobase_trx_init\nT@8: | | | | | | | | | | <ha_innobase::update_thd\nT@8: | | | | | | | | | | >ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | <ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | info: auto_increment: 2\nT@8: | | | | | | | | | | info: auto_increment: next value 3\nT@8: | | | | | | | | | <handler::update_auto_increment\nT@8: | | | | | | | | | >row_ins\nT@8: | | | | | | | | | | row_ins: table: demo/user_info\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_clust_index_entry\nT@8: | | | | | | | | | | | | >row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | <btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): {[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)}\nT@8: | | | | | | | | | | | | <row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | <row_ins_clust_index_entry\nT@8: | | | | | | | | | | <row_ins_index_entry_step\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_sec_index_entry_low\nT@8: | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | <btr_cur_search_to_nth_level\n...\n```\n\n### 调试程序\n\n虽然有debug日志，但是信息还是比较少的，当需要\n\n#### clion\n\nclion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如\n\n#### gdb(lldb)\n\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-1-2.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n对于像Mysql这样的大型项目，我们\n\n### 官方文档\n\n[https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html](../2023-02-17-mysql-content.md)\n\n### 开启debug模式\n\n当mysqld运行时，需要指定参数`--debug`，那么在生成`/tmp/mysqld.trace` 文件，像官网提示的那样，该文件非常大\n\n我们需要在执行时\n\n```log\nT@8: | | | <vio_io_wait\nT@8: | | <vio_ssl_read\nT@8: | <net_read_raw_loop\nT@8: | THD::enter_stage: 'starting' /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103\nT@8: | >PROFILING::status_change\n...\nT@8: | | | | | | <void handler::column_bitmaps_signal\nT@8: | | | | | | >validate_default_values_of_unset_fields\nT@8: | | | | | | <validate_default_values_of_unset_fields\nT@8: | | | | | | >fill_record\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | <fill_record\nT@8: | | | | | | >write_record\nT@8: | | | | | | | >handler::ha_write_row\nT@8: | | | | | | | | >int ha_innobase::write_row\nT@8: | | | | | | | | | >handler::update_auto_increment\nT@8: | | | | | | | | | | >ha_innobase::update_thd\nT@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -> 0x12880e200\nT@8: | | | | | | | | | | | >innobase_trx_init\nT@8: | | | | | | | | | | | <innobase_trx_init\nT@8: | | | | | | | | | | <ha_innobase::update_thd\nT@8: | | | | | | | | | | >ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | <ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | info: auto_increment: 2\nT@8: | | | | | | | | | | info: auto_increment: next value 3\nT@8: | | | | | | | | | <handler::update_auto_increment\nT@8: | | | | | | | | | >row_ins\nT@8: | | | | | | | | | | row_ins: table: demo/user_info\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_clust_index_entry\nT@8: | | | | | | | | | | | | >row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | <btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): {[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)}\nT@8: | | | | | | | | | | | | <row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | <row_ins_clust_index_entry\nT@8: | | | | | | | | | | <row_ins_index_entry_step\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_sec_index_entry_low\nT@8: | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | <btr_cur_search_to_nth_level\n...\n```\n\n### 调试程序\n\n虽然有debug日志，但是信息还是比较少的，当需要\n\n#### clion\n\nclion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如\n\n#### gdb(lldb)\n\n\n\n\n","slug":"mysql/2023-02-17-mysql-1-2","published":1,"updated":"2023-05-06T09:23:51.771Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bp000hgg4b75nthiz8","content":"<p>对于像Mysql这样的大型项目，我们</p>\n<h3 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h3><p><a href=\"../2023-02-17-mysql-content.md\">https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html</a></p>\n<h3 id=\"开启debug模式\"><a href=\"#开启debug模式\" class=\"headerlink\" title=\"开启debug模式\"></a>开启debug模式</h3><p>当mysqld运行时，需要指定参数<code>--debug</code>，那么在生成<code>/tmp/mysqld.trace</code> 文件，像官网提示的那样，该文件非常大</p>\n<p>我们需要在执行时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T@8: | | | &lt;vio_io_wait</span><br><span class=\"line\">T@8: | | &lt;vio_ssl_read</span><br><span class=\"line\">T@8: | &lt;net_read_raw_loop</span><br><span class=\"line\">T@8: | THD::enter_stage: &#x27;starting&#x27; /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103</span><br><span class=\"line\">T@8: | &gt;PROFILING::status_change</span><br><span class=\"line\">...</span><br><span class=\"line\">T@8: | | | | | | &lt;void handler::column_bitmaps_signal</span><br><span class=\"line\">T@8: | | | | | | &gt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &lt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &gt;fill_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | &lt;fill_record</span><br><span class=\"line\">T@8: | | | | | | &gt;write_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;handler::ha_write_row</span><br><span class=\"line\">T@8: | | | | | | | | &gt;int ha_innobase::write_row</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -&gt; 0x12880e200</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: 2</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: next value 3</span><br><span class=\"line\">T@8: | | | | | | | | | &lt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;row_ins</span><br><span class=\"line\">T@8: | | | | | | | | | | row_ins: table: demo/user_info</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): &#123;[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)&#125;</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_sec_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试程序\"><a href=\"#调试程序\" class=\"headerlink\" title=\"调试程序\"></a>调试程序</h3><p>虽然有debug日志，但是信息还是比较少的，当需要</p>\n<h4 id=\"clion\"><a href=\"#clion\" class=\"headerlink\" title=\"clion\"></a>clion</h4><p>clion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如</p>\n<h4 id=\"gdb-lldb\"><a href=\"#gdb-lldb\" class=\"headerlink\" title=\"gdb(lldb)\"></a>gdb(lldb)</h4>","site":{"data":{}},"excerpt":"","more":"<p>对于像Mysql这样的大型项目，我们</p>\n<h3 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h3><p><a href=\"../2023-02-17-mysql-content.md\">https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html</a></p>\n<h3 id=\"开启debug模式\"><a href=\"#开启debug模式\" class=\"headerlink\" title=\"开启debug模式\"></a>开启debug模式</h3><p>当mysqld运行时，需要指定参数<code>--debug</code>，那么在生成<code>/tmp/mysqld.trace</code> 文件，像官网提示的那样，该文件非常大</p>\n<p>我们需要在执行时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T@8: | | | &lt;vio_io_wait</span><br><span class=\"line\">T@8: | | &lt;vio_ssl_read</span><br><span class=\"line\">T@8: | &lt;net_read_raw_loop</span><br><span class=\"line\">T@8: | THD::enter_stage: &#x27;starting&#x27; /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103</span><br><span class=\"line\">T@8: | &gt;PROFILING::status_change</span><br><span class=\"line\">...</span><br><span class=\"line\">T@8: | | | | | | &lt;void handler::column_bitmaps_signal</span><br><span class=\"line\">T@8: | | | | | | &gt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &lt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &gt;fill_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | &lt;fill_record</span><br><span class=\"line\">T@8: | | | | | | &gt;write_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;handler::ha_write_row</span><br><span class=\"line\">T@8: | | | | | | | | &gt;int ha_innobase::write_row</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -&gt; 0x12880e200</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: 2</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: next value 3</span><br><span class=\"line\">T@8: | | | | | | | | | &lt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;row_ins</span><br><span class=\"line\">T@8: | | | | | | | | | | row_ins: table: demo/user_info</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): &#123;[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)&#125;</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_sec_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试程序\"><a href=\"#调试程序\" class=\"headerlink\" title=\"调试程序\"></a>调试程序</h3><p>虽然有debug日志，但是信息还是比较少的，当需要</p>\n<h4 id=\"clion\"><a href=\"#clion\" class=\"headerlink\" title=\"clion\"></a>clion</h4><p>clion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如</p>\n<h4 id=\"gdb-lldb\"><a href=\"#gdb-lldb\" class=\"headerlink\" title=\"gdb(lldb)\"></a>gdb(lldb)</h4>"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n通信协议\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-2-3.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n通信协议\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-2-3","published":1,"updated":"2023-03-03T03:23:39.796Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bp000kgg4b0v4cac5l","content":"<p>通信协议</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>通信协议</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\ninnodb表结构\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-4-1.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\ninnodb表结构\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-4-1","published":1,"updated":"2023-03-03T03:30:23.130Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bp000lgg4b0qh8birc","content":"<p>innodb表结构</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>innodb表结构</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n为什么\n\n作为一个服务端程序员，一直在使用mysql，但是mysql始终是一个黑盒，只知道使用而不清楚原理\n\n时常有一些疑问在心头\n1. 我写的一条insert sql是怎么写入到文件的\n2. mysql中有IS、IX，一直给张冲突表，他们到底有什么用\n### 官方文档\n\n[https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html](../2023-02-17-mysql-content.md)\n\n### 开启debug模式\n\n当mysqld运行时，需要指定参数`--debug`，那么在生成`/tmp/mysqld.trace` 文件，像官网提示的那样，该文件非常大\n\n我们需要在执行时\n\n```log\nT@8: | | | <vio_io_wait\nT@8: | | <vio_ssl_read\nT@8: | <net_read_raw_loop\nT@8: | THD::enter_stage: 'starting' /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103\nT@8: | >PROFILING::status_change\n...\nT@8: | | | | | | <void handler::column_bitmaps_signal\nT@8: | | | | | | >validate_default_values_of_unset_fields\nT@8: | | | | | | <validate_default_values_of_unset_fields\nT@8: | | | | | | >fill_record\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | <fill_record\nT@8: | | | | | | >write_record\nT@8: | | | | | | | >handler::ha_write_row\nT@8: | | | | | | | | >int ha_innobase::write_row\nT@8: | | | | | | | | | >handler::update_auto_increment\nT@8: | | | | | | | | | | >ha_innobase::update_thd\nT@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -> 0x12880e200\nT@8: | | | | | | | | | | | >innobase_trx_init\nT@8: | | | | | | | | | | | <innobase_trx_init\nT@8: | | | | | | | | | | <ha_innobase::update_thd\nT@8: | | | | | | | | | | >ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | <ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | info: auto_increment: 2\nT@8: | | | | | | | | | | info: auto_increment: next value 3\nT@8: | | | | | | | | | <handler::update_auto_increment\nT@8: | | | | | | | | | >row_ins\nT@8: | | | | | | | | | | row_ins: table: demo/user_info\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_clust_index_entry\nT@8: | | | | | | | | | | | | >row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | <btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): {[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)}\nT@8: | | | | | | | | | | | | <row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | <row_ins_clust_index_entry\nT@8: | | | | | | | | | | <row_ins_index_entry_step\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_sec_index_entry_low\nT@8: | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | <btr_cur_search_to_nth_level\n...\n```\n\n### 调试程序\n\n虽然有debug日志，但是信息还是比较少的，当需要\n\n#### clion\n\nclion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如\n\n#### gdb(lldb)\n\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-0-0.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n为什么\n\n作为一个服务端程序员，一直在使用mysql，但是mysql始终是一个黑盒，只知道使用而不清楚原理\n\n时常有一些疑问在心头\n1. 我写的一条insert sql是怎么写入到文件的\n2. mysql中有IS、IX，一直给张冲突表，他们到底有什么用\n### 官方文档\n\n[https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html](../2023-02-17-mysql-content.md)\n\n### 开启debug模式\n\n当mysqld运行时，需要指定参数`--debug`，那么在生成`/tmp/mysqld.trace` 文件，像官网提示的那样，该文件非常大\n\n我们需要在执行时\n\n```log\nT@8: | | | <vio_io_wait\nT@8: | | <vio_ssl_read\nT@8: | <net_read_raw_loop\nT@8: | THD::enter_stage: 'starting' /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103\nT@8: | >PROFILING::status_change\n...\nT@8: | | | | | | <void handler::column_bitmaps_signal\nT@8: | | | | | | >validate_default_values_of_unset_fields\nT@8: | | | | | | <validate_default_values_of_unset_fields\nT@8: | | | | | | >fill_record\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | | >Item::save_in_field\nT@8: | | | | | | | <Item::save_in_field\nT@8: | | | | | | <fill_record\nT@8: | | | | | | >write_record\nT@8: | | | | | | | >handler::ha_write_row\nT@8: | | | | | | | | >int ha_innobase::write_row\nT@8: | | | | | | | | | >handler::update_auto_increment\nT@8: | | | | | | | | | | >ha_innobase::update_thd\nT@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -> 0x12880e200\nT@8: | | | | | | | | | | | >innobase_trx_init\nT@8: | | | | | | | | | | | <innobase_trx_init\nT@8: | | | | | | | | | | <ha_innobase::update_thd\nT@8: | | | | | | | | | | >ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | <ha_innobase::innobase_lock_autoinc\nT@8: | | | | | | | | | | info: auto_increment: 2\nT@8: | | | | | | | | | | info: auto_increment: next value 3\nT@8: | | | | | | | | | <handler::update_auto_increment\nT@8: | | | | | | | | | >row_ins\nT@8: | | | | | | | | | | row_ins: table: demo/user_info\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_clust_index_entry\nT@8: | | | | | | | | | | | | >row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | <btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): {[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)}\nT@8: | | | | | | | | | | | | <row_ins_clust_index_entry_low\nT@8: | | | | | | | | | | | <row_ins_clust_index_entry\nT@8: | | | | | | | | | | <row_ins_index_entry_step\nT@8: | | | | | | | | | | >row_ins_index_entry_step\nT@8: | | | | | | | | | | | >row_ins_sec_index_entry_low\nT@8: | | | | | | | | | | | | >btr_cur_search_to_nth_level\nT@8: | | | | | | | | | | | | <btr_cur_search_to_nth_level\n...\n```\n\n### 调试程序\n\n虽然有debug日志，但是信息还是比较少的，当需要\n\n#### clion\n\nclion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如\n\n#### gdb(lldb)\n\n\n\n\n","slug":"mysql/2023-02-17-mysql-0-0","published":1,"updated":"2023-05-06T09:23:51.775Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bq000ogg4b9rzh1fc1","content":"<p>为什么</p>\n<p>作为一个服务端程序员，一直在使用mysql，但是mysql始终是一个黑盒，只知道使用而不清楚原理</p>\n<p>时常有一些疑问在心头</p>\n<ol>\n<li>我写的一条insert sql是怎么写入到文件的</li>\n<li>mysql中有IS、IX，一直给张冲突表，他们到底有什么用</li>\n</ol>\n<h3 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h3><p><a href=\"../2023-02-17-mysql-content.md\">https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html</a></p>\n<h3 id=\"开启debug模式\"><a href=\"#开启debug模式\" class=\"headerlink\" title=\"开启debug模式\"></a>开启debug模式</h3><p>当mysqld运行时，需要指定参数<code>--debug</code>，那么在生成<code>/tmp/mysqld.trace</code> 文件，像官网提示的那样，该文件非常大</p>\n<p>我们需要在执行时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T@8: | | | &lt;vio_io_wait</span><br><span class=\"line\">T@8: | | &lt;vio_ssl_read</span><br><span class=\"line\">T@8: | &lt;net_read_raw_loop</span><br><span class=\"line\">T@8: | THD::enter_stage: &#x27;starting&#x27; /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103</span><br><span class=\"line\">T@8: | &gt;PROFILING::status_change</span><br><span class=\"line\">...</span><br><span class=\"line\">T@8: | | | | | | &lt;void handler::column_bitmaps_signal</span><br><span class=\"line\">T@8: | | | | | | &gt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &lt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &gt;fill_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | &lt;fill_record</span><br><span class=\"line\">T@8: | | | | | | &gt;write_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;handler::ha_write_row</span><br><span class=\"line\">T@8: | | | | | | | | &gt;int ha_innobase::write_row</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -&gt; 0x12880e200</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: 2</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: next value 3</span><br><span class=\"line\">T@8: | | | | | | | | | &lt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;row_ins</span><br><span class=\"line\">T@8: | | | | | | | | | | row_ins: table: demo/user_info</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): &#123;[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)&#125;</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_sec_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试程序\"><a href=\"#调试程序\" class=\"headerlink\" title=\"调试程序\"></a>调试程序</h3><p>虽然有debug日志，但是信息还是比较少的，当需要</p>\n<h4 id=\"clion\"><a href=\"#clion\" class=\"headerlink\" title=\"clion\"></a>clion</h4><p>clion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如</p>\n<h4 id=\"gdb-lldb\"><a href=\"#gdb-lldb\" class=\"headerlink\" title=\"gdb(lldb)\"></a>gdb(lldb)</h4>","site":{"data":{}},"excerpt":"","more":"<p>为什么</p>\n<p>作为一个服务端程序员，一直在使用mysql，但是mysql始终是一个黑盒，只知道使用而不清楚原理</p>\n<p>时常有一些疑问在心头</p>\n<ol>\n<li>我写的一条insert sql是怎么写入到文件的</li>\n<li>mysql中有IS、IX，一直给张冲突表，他们到底有什么用</li>\n</ol>\n<h3 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h3><p><a href=\"../2023-02-17-mysql-content.md\">https://dev.mysql.com/doc/refman/8.0/en/debugging-mysql.html</a></p>\n<h3 id=\"开启debug模式\"><a href=\"#开启debug模式\" class=\"headerlink\" title=\"开启debug模式\"></a>开启debug模式</h3><p>当mysqld运行时，需要指定参数<code>--debug</code>，那么在生成<code>/tmp/mysqld.trace</code> 文件，像官网提示的那样，该文件非常大</p>\n<p>我们需要在执行时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T@8: | | | &lt;vio_io_wait</span><br><span class=\"line\">T@8: | | &lt;vio_ssl_read</span><br><span class=\"line\">T@8: | &lt;net_read_raw_loop</span><br><span class=\"line\">T@8: | THD::enter_stage: &#x27;starting&#x27; /Users/mico/code/open_source/mysql-server/sql/conn_handler/init_net_server_extension.cc:103</span><br><span class=\"line\">T@8: | &gt;PROFILING::status_change</span><br><span class=\"line\">...</span><br><span class=\"line\">T@8: | | | | | | &lt;void handler::column_bitmaps_signal</span><br><span class=\"line\">T@8: | | | | | | &gt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &lt;validate_default_values_of_unset_fields</span><br><span class=\"line\">T@8: | | | | | | &gt;fill_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &gt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | | &lt;Item::save_in_field</span><br><span class=\"line\">T@8: | | | | | | &lt;fill_record</span><br><span class=\"line\">T@8: | | | | | | &gt;write_record</span><br><span class=\"line\">T@8: | | | | | | | &gt;handler::ha_write_row</span><br><span class=\"line\">T@8: | | | | | | | | &gt;int ha_innobase::write_row</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | | ha_innobase::update_thd: user_thd: 0x12880e200 -&gt; 0x12880e200</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;innobase_trx_init</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::update_thd</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;ha_innobase::innobase_lock_autoinc</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: 2</span><br><span class=\"line\">T@8: | | | | | | | | | | info: auto_increment: next value 3</span><br><span class=\"line\">T@8: | | | | | | | | | &lt;handler::update_auto_increment</span><br><span class=\"line\">T@8: | | | | | | | | | &gt;row_ins</span><br><span class=\"line\">T@8: | | | | | | | | | | row_ins: table: demo/user_info</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | | ib_cur: insert PRIMARY (158) by 4381: TUPLE (info_bits=0, 6 n_cmp=1, fields): &#123;[8]        (0x0000000000000002),[6]      (0x00000000111d),[7]       (0x82000001090110),[8]        (0x00000000000003e9),[8]pangbian(0x70616e676269616e),[a]1990-08-12(0x313939302d30382d3132)&#125;</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;row_ins_clust_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | &lt;row_ins_clust_index_entry</span><br><span class=\"line\">T@8: | | | | | | | | | | &lt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | &gt;row_ins_index_entry_step</span><br><span class=\"line\">T@8: | | | | | | | | | | | &gt;row_ins_sec_index_entry_low</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &gt;btr_cur_search_to_nth_level</span><br><span class=\"line\">T@8: | | | | | | | | | | | | &lt;btr_cur_search_to_nth_level</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试程序\"><a href=\"#调试程序\" class=\"headerlink\" title=\"调试程序\"></a>调试程序</h3><p>虽然有debug日志，但是信息还是比较少的，当需要</p>\n<h4 id=\"clion\"><a href=\"#clion\" class=\"headerlink\" title=\"clion\"></a>clion</h4><p>clion是一款比较方便的ide，只需要在某行代码的左侧单击一下就可以下断点，例如</p>\n<h4 id=\"gdb-lldb\"><a href=\"#gdb-lldb\" class=\"headerlink\" title=\"gdb(lldb)\"></a>gdb(lldb)</h4>"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\ninnodb 行结构\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-4-2.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\ninnodb 行结构\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-4-2","published":1,"updated":"2023-03-03T03:30:30.862Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bq000pgg4b965jfprj","content":"<p>innodb 行结构</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>innodb 行结构</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\nsql语法解析\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-3-1.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\nsql语法解析\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-3-1","published":1,"updated":"2023-03-03T03:29:28.892Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bq000sgg4bdhvdhkz5","content":"<p>sql语法解析</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>sql语法解析</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-2-1.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-2-1","published":1,"updated":"2023-03-03T03:21:47.129Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bq000tgg4bddt003cp","content":"<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\nmysql的通信协议\n\n## 连接管理\n\n| 类型          | 名字      | 描述 |\n|-------------|---------|----|\n| int<3>      | 消息体长度   |    |\n| int<1>      | 序号      |    |\n| string<var> | payload |    |\n\n例如：`01 00 00 00 01`\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-2-4.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\nmysql的通信协议\n\n## 连接管理\n\n| 类型          | 名字      | 描述 |\n|-------------|---------|----|\n| int<3>      | 消息体长度   |    |\n| int<1>      | 序号      |    |\n| string<var> | payload |    |\n\n例如：`01 00 00 00 01`\n\n\n\n","slug":"mysql/2023-02-17-mysql-2-4","published":1,"updated":"2023-05-06T09:21:01.121Z","comments":1,"photos":[],"link":"","_id":"clhbtg9br000vgg4bb7ql7am6","content":"<p>mysql的通信协议</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int&lt;3&gt;</td>\n<td>消息体长度</td>\n<td></td>\n</tr>\n<tr>\n<td>int&lt;1&gt;</td>\n<td>序号</td>\n<td></td>\n</tr>\n<tr>\n<td>string<var></td>\n<td>payload</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>例如：<code>01 00 00 00 01</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>mysql的通信协议</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int&lt;3&gt;</td>\n<td>消息体长度</td>\n<td></td>\n</tr>\n<tr>\n<td>int&lt;1&gt;</td>\n<td>序号</td>\n<td></td>\n</tr>\n<tr>\n<td>string<var></td>\n<td>payload</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>例如：<code>01 00 00 00 01</code></p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n事务 redo\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-5-2.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n事务 redo\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-5-2","published":1,"updated":"2023-03-03T03:32:48.062Z","comments":1,"photos":[],"link":"","_id":"clhbtg9br000ygg4b66un8ziq","content":"<p>事务 redo</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>事务 redo</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n事务 多版本控制\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-5-4.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n事务 多版本控制\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-5-4","published":1,"updated":"2023-03-03T03:33:25.539Z","comments":1,"photos":[],"link":"","_id":"clhbtg9br0010gg4b96nicgoj","content":"<p>事务 多版本控制</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>事务 多版本控制</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n事务 undo\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-5-3.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n事务 undo\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-5-3","published":1,"updated":"2023-03-03T03:33:06.000Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bs0013gg4b0l2eesk9","content":"<p>事务 undo</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>事务 undo</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n事务介绍\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-5-1.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n事务介绍\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-5-1","published":1,"updated":"2023-03-03T03:32:45.161Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bs0015gg4b54hu8t4a","content":"<p>事务介绍</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>事务介绍</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n锁介绍\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-6-1.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n锁介绍\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-6-1","published":1,"updated":"2023-03-03T03:33:42.918Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bs0018gg4bgkmn0l6z","content":"<p>锁介绍</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>锁介绍</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n锁 类型\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-6-2.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n锁 类型\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-6-2","published":1,"updated":"2023-03-03T03:33:53.754Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bt001agg4bhs1l17bm","content":"<p>锁 类型</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>锁 类型</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\n事务隔离级别\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-6-3.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\n事务隔离级别\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-6-3","published":1,"updated":"2023-03-03T03:34:06.628Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bt001dgg4b89797gcb","content":"<p>事务隔离级别</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>事务隔离级别</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\nbinlog\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-7-1.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\nbinlog\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-7-1","published":1,"updated":"2023-03-03T03:34:31.379Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bt001fgg4b2lkdb7sr","content":"<p>binlog</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>binlog</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"},{"layout":"post","title":"如何阅读MySQL源代码","date":"2023-03-02T16:00:00.000Z","_content":"\nbinlog同步\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","source":"_posts/mysql/2023-02-17-mysql-7-2.md","raw":"---\nlayout: post # 使用post模版\n\ntitle:  \"如何阅读MySQL源代码\"\n\ndate:   2023-03-03\n\ncategories: mysql\n\n---\n\nbinlog同步\n\n## 连接管理\n\nmysql作为一个服务端程序，需要处理来自客户端的连接\n\n### 主流连接管理\n\n#### 进程(线程)模式\n操作系统原生提供\n\n#### 进程管理连接\n\n#### 协程模式\n比如Golang的`goroutine`， java的`VirtualThread` 等，没一个连接一个协程\n\n\n\n","slug":"mysql/2023-02-17-mysql-7-2","published":1,"updated":"2023-03-03T03:35:23.064Z","comments":1,"photos":[],"link":"","_id":"clhbtg9bt001igg4b1owe5qmq","content":"<p>binlog同步</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>binlog同步</p>\n<h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><p>mysql作为一个服务端程序，需要处理来自客户端的连接</p>\n<h3 id=\"主流连接管理\"><a href=\"#主流连接管理\" class=\"headerlink\" title=\"主流连接管理\"></a>主流连接管理</h3><h4 id=\"进程-线程-模式\"><a href=\"#进程-线程-模式\" class=\"headerlink\" title=\"进程(线程)模式\"></a>进程(线程)模式</h4><p>操作系统原生提供</p>\n<h4 id=\"进程管理连接\"><a href=\"#进程管理连接\" class=\"headerlink\" title=\"进程管理连接\"></a>进程管理连接</h4><h4 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h4><p>比如Golang的<code>goroutine</code>， java的<code>VirtualThread</code> 等，没一个连接一个协程</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clhbtg9bi0000gg4bfwg2h2uo","category_id":"clhbtg9bl0002gg4bfhxpge9m","_id":"clhbtg9bn0009gg4bfo4afbwi"},{"post_id":"clhbtg9bm0005gg4b6u90gjvx","category_id":"clhbtg9bl0002gg4bfhxpge9m","_id":"clhbtg9bo000cgg4b0s715gob"},{"post_id":"clhbtg9bl0003gg4ba5vta4bc","category_id":"clhbtg9bl0002gg4bfhxpge9m","_id":"clhbtg9bp000igg4bbxn76s99"},{"post_id":"clhbtg9bm0004gg4b0vft0yy2","category_id":"clhbtg9bo000egg4b0k9u3wzt","_id":"clhbtg9bq000ngg4bcb067mue"},{"post_id":"clhbtg9bn0007gg4b1arlgaaj","category_id":"clhbtg9bo000egg4b0k9u3wzt","_id":"clhbtg9bq000qgg4b52r33xmq"},{"post_id":"clhbtg9bq000ogg4b9rzh1fc1","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9br000ugg4bc7nj9r0f"},{"post_id":"clhbtg9bn0008gg4bbkrl4511","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9br000wgg4bhxqwg7tp"},{"post_id":"clhbtg9bq000pgg4b965jfprj","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9br000zgg4b1rstfwrq"},{"post_id":"clhbtg9bq000sgg4bdhvdhkz5","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9br0011gg4b4c6r3t7j"},{"post_id":"clhbtg9bq000tgg4bddt003cp","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bs0014gg4b43sva6me"},{"post_id":"clhbtg9bo000bgg4b58prbz2p","category_id":"clhbtg9bq000rgg4b2qu775zi","_id":"clhbtg9bs0016gg4bdwtig6hv"},{"post_id":"clhbtg9br000vgg4bb7ql7am6","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bs0019gg4b4yrc3ihh"},{"post_id":"clhbtg9br000ygg4b66un8ziq","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bt001bgg4b3912dzxm"},{"post_id":"clhbtg9bo000dgg4bc4208nnv","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bt001egg4b0nzm2jld"},{"post_id":"clhbtg9br0010gg4b96nicgoj","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bt001ggg4bc2r25psj"},{"post_id":"clhbtg9bs0013gg4b0l2eesk9","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001jgg4bbupxawky"},{"post_id":"clhbtg9bo000ggg4b5yd6atac","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001kgg4b91sa1dhv"},{"post_id":"clhbtg9bs0015gg4b54hu8t4a","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001lgg4b2pbqfzam"},{"post_id":"clhbtg9bs0018gg4bgkmn0l6z","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001mgg4bfiu9b9fz"},{"post_id":"clhbtg9bp000hgg4b75nthiz8","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001ngg4bg034dlm2"},{"post_id":"clhbtg9bt001agg4bhs1l17bm","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001ogg4baqzl32tv"},{"post_id":"clhbtg9bt001dgg4b89797gcb","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001pgg4b41tc3pbt"},{"post_id":"clhbtg9bp000kgg4b0v4cac5l","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001qgg4bgqly5cdj"},{"post_id":"clhbtg9bt001fgg4b2lkdb7sr","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001rgg4b59faf7yf"},{"post_id":"clhbtg9bt001igg4b1owe5qmq","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001sgg4b990e1dgt"},{"post_id":"clhbtg9bp000lgg4b0qh8birc","category_id":"clhbtg9bq000mgg4bf9qv2tbn","_id":"clhbtg9bu001tgg4b22gzesat"}],"PostTag":[],"Tag":[]}}